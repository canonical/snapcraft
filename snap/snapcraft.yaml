name: snapcraft
summary: easily create snaps
description: |
    Snapcraft aims to make upstream developers' lives easier and as such is not
    a single toolset, but instead is a collection of tools that enable the
    natural workflow of an upstream to be extended with a simple release step
    into Snappy.
adopt-info: snapcraft
confinement: classic

apps:
  snapcraft:
    command: bin/snapcraft
    completer: snapcraft-completion

parts:
  bash-completion:
    source: debian
    plugin: dump
    stage:
      - snapcraft-completion
  snapcraft:
    source: .
    plugin: python
    requirements: requirements.txt
    build-packages:
        - build-essential
        - libapt-pkg-dev
        - libffi-dev
        - libssl-dev
        - libsodium-dev
        - liblzma-dev
        - patch
        - sed
    stage-packages:
        - apt
        - apt-utils
        - binutils
        - execstack
        - gpgv
        - libffi6
        - libsodium18
        - patchelf
        - squashfs-tools
        - xdelta3
    override-pull: |
        version="$(git describe --dirty --always | sed -e 's/-/+git/;y/-/./')"
        [ -n "$(echo $version | grep "+git")" ] && grade=devel || grade=stable
        snapcraftctl set-version "$version"
        snapcraftctl set-grade "$grade"
        snapcraftctl pull
    override-build: |
        snapcraftctl build
        TRIPLET_PATH="$SNAPCRAFT_PART_INSTALL/usr/lib/$(gcc -print-multiarch)"
        LIBSODIUM="$(readlink -n "$TRIPLET_PATH/libsodium.so.18")"
        # Remove so the link can be recreated on re-builds
        rm -f "$TRIPLET_PATH/libsodium.so"
        ln -s "$LIBSODIUM" "$TRIPLET_PATH/libsodium.so"

        # Restore patched files
        PYTHON_PACKAGE_PATH="$SNAPCRAFT_PART_INSTALL/usr/lib/python3.5/"
        [ -f "patched/ctypes/__init__.py.orig" ] && mv "patched/ctypes/__init__.py.orig" "$PYTHON_PACKAGE_PATH/ctypes/__init__.py"

        SITE_PACKAGES_PATH="$SNAPCRAFT_PART_INSTALL/lib/python3.5/site-packages"
        [ -f "patched/yaml/emitter.py.orig" ] && mv "patched/yaml/emitter.py.orig" "$SITE_PACKAGES_PATH/yaml/emitter.py"
        [ -f "patched/yaml/reader.py.orig" ] && mv "patched/yaml/reader.py.orig" "$SITE_PACKAGES_PATH/yaml/reader.py"

        # Apply patches
        patch -b "$PYTHON_PACKAGE_PATH/ctypes/__init__.py" patches/ctypes_init.diff
        patch -b -d "$SITE_PACKAGES_PATH/" -p1 < patches/pyyaml-support-high-codepoints.diff

        # Save patches to allow rebuilding
        mkdir -p patched/ctypes
        [ -f "$PYTHON_PACKAGE_PATH/ctypes/__init__.py.orig" ] && mv "$PYTHON_PACKAGE_PATH/ctypes/__init__.py.orig" patched/ctypes

        mkdir -p patched/yaml
        [ -f "$SITE_PACKAGES_PATH/yaml/emitter.py.orig" ] && mv "$SITE_PACKAGES_PATH/yaml/emitter.py.orig" patched/yaml
        [ -f "$SITE_PACKAGES_PATH/yaml/reader.py.orig" ] && mv "$SITE_PACKAGES_PATH/yaml/reader.py.orig" patched/yaml
    override-prime: |
        snapcraftctl prime
        # Now that everything is built, let's disable user site-packages
        # as stated in PEP-0370
        sed -i usr/lib/python3.5/site.py -e 's/^ENABLE_USER_SITE = None$/ENABLE_USER_SITE = False/'
        # This is the last step, let's now compile all our pyc files.
        ./usr/bin/python3 -m compileall .
