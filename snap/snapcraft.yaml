name: snapcraft
base: core24
summary: easily create snaps
description: |
  Snapcraft aims to make upstream developers' lives easier and as such is not
  a single toolset, but instead is a collection of tools that enable the
  natural workflow of an upstream to be extended with a simple release step
  into Snappy.
adopt-info: snapcraft-metadata
confinement: classic
license: GPL-3.0
assumes:
  - snapd2.43

# https://github.com/canonical/snapcraft/issues/4187
environment:
  PATH: "$SNAP/libexec/snapcraft:/snap/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  # cryptography>=42.0 cannot load legacy algorithms on
  # Ubuntu 20.04 for armhf, ppc64el, riscv64, and s390x
  CRYPTOGRAPHY_OPENSSL_NO_LEGACY: "1"

apps:
  snapcraft:
    environment:
      # https://github.com/lxc/pylxd/pull/361
      PYLXD_WARNINGS: "none"
    command: bin/python $SNAP/bin/snapcraft
    completer: completion.sh

build-packages:
  - cargo
  - build-essential
  - intltool
  - libapt-pkg-dev
  - libffi-dev
  - libssl-dev
  - libsodium-dev
  - liblzma-dev
  - libxml2-dev
  - libxslt1-dev
  - libyaml-dev
  - patch
  - pkg-config
  - python3-dev
  - rustc
  - sed

parts:
  snapcraft-scripts:
    source: snap/local
    plugin: dump
    organize:
      craft.git: libexec/snapcraft/craft.git
    stage:
      - "libexec/"

  git:
    plugin: nil
    stage-packages: [git]
    build-attributes:
      - enable-patchelf
    prime:
      - "-usr/bin"
      - "-usr/share/doc"
      - "-usr/share/man"
      # perl is part of the core22 / core24
      - "-usr/share/perl"
      - "-usr/lib/x86_64-linux-gnu/perl"
      - "-usr/lib/x86_64-linux-gnu/libperl*"
      - "-usr/lib/x86_64-linux-gnu/libgdbm*"

  patchelf:
    plugin: autotools
    source: https://github.com/canonical/patchelf
    source-type: git
    source-branch: "0.9+snapcraft"
    autotools-configure-parameters:
      - --prefix=/
    build-attributes:
      - enable-patchelf
    build-packages:
      - g++
      - git
      - make
    override-pull: |
      ${SNAP}/libexec/snapcraft/craftctl default

      if [ "${CRAFT_TARGET_ARCH}" = "riscv64" ]; then
        git am "${CRAFT_PROJECT_DIR}/snap/local/patches/patchelf/0001-Always-use-the-ET_DYN-codepath-avoiding-shifting-loa.patch"
        git am "${CRAFT_PROJECT_DIR}/snap/local/patches/patchelf/0002-Fix-rewriteSectionsLibrary-to-not-assume-the-base-ad.patch"
      fi
    override-build: |
      ${SNAP}/libexec/snapcraft/craftctl default
      make check
    prime:
      - bin/patchelf

  snapcraft-libs:
    plugin: nil
    stage-packages:
      - apt
      - apt-transport-https
      - apt-utils
      - binutils
      - execstack
      - gpg
      - gpgv
      - libsodium23
      - libxml2
      - libxslt1.1
      - libpython3-stdlib
      - libpython3.12-stdlib
      - libpython3.12-minimal
      - python3-minimal
      - python3-pkg-resources
      - python3.12-minimal
      - squashfs-tools
      - xdelta3
    build-attributes:
      - enable-patchelf
    override-build: |
      ${SNAP}/libexec/snapcraft/craftctl default

      echo "Create libsodium symlink..."
      TRIPLET_PATH="$SNAPCRAFT_PART_INSTALL/usr/lib/$(gcc -print-multiarch)"
      LIBSODIUM="$(readlink -n "$TRIPLET_PATH/libsodium.so.23")"
      # Remove so the link can be recreated on re-builds
      rm -f "$TRIPLET_PATH/libsodium.so"
      ln -s "$LIBSODIUM" "$TRIPLET_PATH/libsodium.so"

      # Restore patched files
      PYTHON_PACKAGE_PATH="${SNAPCRAFT_PART_INSTALL}/usr/lib/python3.12/"
      CTYPES_INIT="ctypes/__init__.py"
      CTYPES_INIT_ORIG="patched/${CTYPES_INIT}.orig"
      [ -f "${CTYPES_INIT_ORIG}" ] && mv "${CTYPES_INIT_ORIG}" "${PYTHON_PACKAGE_PATH}/${CTYPES_INIT}"

      # Apply patches
      echo "Patching ctypes..."
      patch -s -b "${PYTHON_PACKAGE_PATH}/${CTYPES_INIT}" "${SNAPCRAFT_PROJECT_DIR}/snap/local/patches/python/ctypes_init.diff"

      # Save patches to allow rebuilding
      mkdir -p patched/ctypes
      if [ -f "${PYTHON_PACKAGE_PATH}/${CTYPES_INIT}.orig" ]; then
        mv "${PYTHON_PACKAGE_PATH}/${CTYPES_INIT}.orig" patched/ctypes
      fi

      # Disable site packages
      sed -i "${SNAPCRAFT_PART_INSTALL}/usr/lib/python3.12/site.py" \
        -e 's/^ENABLE_USER_SITE = None$/ENABLE_USER_SITE = False/'

  python-apt:
    plugin: nil
    stage-packages: [python3-apt]
    organize:
      usr/lib/python3/dist-packages/apt*: lib/python3.12/site-packages/

  libgit2:
    source: https://github.com/libgit2/libgit2/archive/refs/tags/v1.7.2.tar.gz
    source-checksum: sha256/de384e29d7efc9330c6cdb126ebf88342b5025d920dcb7c645defad85195ea7f
    plugin: cmake
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/usr
      - -DCMAKE_BUILD_TYPE=RelWithDebInfo
    build-attributes:
      - enable-patchelf
    prime:
      - -usr/include

  snapcraft:
    source: .
    plugin: uv
    build-environment:
      - UV_NO_BINARY: "1"
      - UV_COMPILE_BYTECODE: "1"
      - SODIUM_INSTALL: "system"
      - CFLAGS: "$(pkg-config python-3.12 yaml-0.1 --cflags)"
    build-attributes:
      - enable-patchelf
    build-snaps:
      - astral-uv
    organize:
      # Put snapcraftctl and craftctl into its own directory that can be included in the PATH
      # without including other binaries.
      bin/craftctl: libexec/snapcraft/craftctl
      bin/snapcraftctl: bin/scriptlet-bin/snapcraftctl
      # Also install the compatibility wrapper for core22+.
      bin/snapcraftctl-compat: libexec/snapcraft/snapcraftctl
      # Include general data in the share directory
      "**/site-packages/extensions": share/snapcraft/extensions
      "**/site-packages/keyrings": share/snapcraft/keyrings
      "**/site-packages/schema": share/snapcraft/schema
    override-build: |
      ${SNAP}/libexec/snapcraft/craftctl default
      ln -sf python3 $CRAFT_PART_INSTALL/bin/python
    after: [snapcraft-libs, libgit2, python-apt]

  snapcraft-metadata:
    plugin: nil
    build-environment:
      - UV_PROJECT_ENVIRONMENT: $CRAFT_STAGE/
    override-build: |
      # Just to avoid repetition of a long-ish path
      OB_CRAFTCTL=${SNAP}/libexec/${CRAFT_PROJECT_NAME}/craftctl

      # Set the snap package version
      version=$($CRAFT_STAGE/bin/snapcraft version | cut -d ' ' -f 2)
      $OB_CRAFTCTL set version="$version"

      # Set the snap package grade - "devel" if ".post" is in the version number
      [[ $version =~ ".post" ]] && grade=devel || grade=stable
      $OB_CRAFTCTL set grade="$grade"
    after: [snapcraft]

  chisel:
    plugin: nil
    stage-snaps:
      - chisel/latest/candidate
    organize:
      bin/chisel: libexec/snapcraft/chisel
    stage:
      - libexec/snapcraft/chisel

  completion-script:
    after: [snapcraft]
    plugin: nil
    build-environment:
      - PYTHONPATH: $CRAFT_STAGE/lib/python3.12/site-packages
    override-build: |
      python3 -m craft_cli.completion $CRAFT_PROJECT_NAME snapcraft.application:get_app_info \
          > $CRAFT_PART_INSTALL/completion.sh
