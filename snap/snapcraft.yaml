name: snapcraft
base: core20
summary: easily create snaps
description: |
    Snapcraft aims to make upstream developers' lives easier and as such is not
    a single toolset, but instead is a collection of tools that enable the
    natural workflow of an upstream to be extended with a simple release step
    into Snappy.
adopt-info: snapcraft
confinement: classic
license: GPL-3.0
assumes:
  - snapd2.43

apps:
  snapcraft:
    environment:
      PATH: "$SNAP/libexec/snapcraft:/snap/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      # https://github.com/lxc/pylxd/pull/361
      PYLXD_WARNINGS: "none"
    command: bin/python $SNAP/bin/snapcraft
    completer: snapcraft-completion

build-packages:
  - build-essential
  - intltool
  - libapt-pkg-dev
  - libffi-dev
  - libssl-dev
  - libsodium-dev
  - liblzma-dev
  - libxml2-dev
  - libxslt1-dev
  - libyaml-dev
  - patch
  - pkg-config
  - python3-dev
  - sed

parts:
  bash-completion:
    source: debian
    plugin: dump
    stage:
      - snapcraft-completion

  patchelf:
    plugin: autotools
    source: https://github.com/snapcore/patchelf
    source-type: git
    source-branch: '0.9+snapcraft'
    autotools-configure-parameters:
      - --prefix=/
    build-packages:
      - g++
      - git
      - make
    override-pull: |
      snapcraftctl pull

      if [ "${SNAPCRAFT_TARGET_ARCH}" = "riscv64" ]; then
        git am "${SNAPCRAFT_PROJECT_DIR}/snap/local/patches/patchelf/0001-Always-use-the-ET_DYN-codepath-avoiding-shifting-loa.patch"
        git am "${SNAPCRAFT_PROJECT_DIR}/snap/local/patches/patchelf/0002-Fix-rewriteSectionsLibrary-to-not-assume-the-base-ad.patch"
      fi
    override-build: |
      snapcraftctl build
      make check
    prime:
      - bin/patchelf

  snapcraft-libs:
    plugin: nil
    stage-packages:
        - apt
        - apt-transport-https
        - apt-utils
        - binutils
        - execstack
        - gpg
        - gpgv
        - libffi7
        - libsodium23
        - libxml2
        - libxslt1.1
        - libpython3-stdlib
        - libpython3.8-stdlib
        - libpython3.8-minimal
        - python3-pip
        - python3-setuptools
        - python3-wheel
        - python3-venv
        - python3-minimal
        - python3-distutils
        - python3-pkg-resources
        - python3.8-minimal
        - squashfs-tools
        - xdelta3
    override-build: |
      snapcraftctl build

      echo "Create libsodium symlink..."
      TRIPLET_PATH="$SNAPCRAFT_PART_INSTALL/usr/lib/$(gcc -print-multiarch)"
      LIBSODIUM="$(readlink -n "$TRIPLET_PATH/libsodium.so.23")"
      # Remove so the link can be recreated on re-builds
      rm -f "$TRIPLET_PATH/libsodium.so"
      ln -s "$LIBSODIUM" "$TRIPLET_PATH/libsodium.so"
      $SNAPCRAFT_PROJECT_DIR/tools/snapcraft-override-build.sh

  snapcraft:
    source: .
    plugin: python
    python-packages:
        # Lock down cryptography to 3.4 to override the rust dependency.
        - cryptography==3.4
        - wheel
        - pip
        - setuptools
    requirements:
        - requirements.txt
    organize:
        # Put snapcraftctl into its own directory that can be included in the PATH
        # without including other binaries.
        bin/snapcraftctl: bin/scriptlet-bin/snapcraftctl
        # Also install the compatibility wrapper for core22+
        bin/snapcraftctl-compat: libexec/snapcraft/snapcraftctl
    build-environment:
        - "CRYPTOGRAPHY_DONT_BUILD_RUST": "1"
        - "SODIUM_INSTALL": "system"
        - "CFLAGS": "$(pkg-config python-3.8 yaml-0.1 --cflags)"
    override-build: |
        snapcraftctl build

        version="$(python3 setup.py --version)"
        snapcraftctl set-version "$version"

        [ -n "$(echo $version | grep "+git")" ] && grade=devel || grade=stable
        snapcraftctl set-grade "$grade"
        ln -sf ../usr/bin/python3.8 $SNAPCRAFT_PART_INSTALL/bin/python3
        mkdir -p $SNAPCRAFT_PART_INSTALL/libexec/snapcraft
        mv $SNAPCRAFT_PART_INSTALL/bin/craftctl $SNAPCRAFT_PART_INSTALL/libexec/snapcraft/
        sed -i -e '1 s|^#!/.*|#!/snap/snapcraft/current/bin/python -E|' $SNAPCRAFT_PART_INSTALL/libexec/snapcraft/craftctl
    after: [snapcraft-libs]

hooks:
  configure:
    environment:
      PATH: "$SNAP/bin"
