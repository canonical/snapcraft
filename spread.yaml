project: snapcraft

environment:
  # Tell snapcraft to use the current host to build
  SNAPCRAFT_BUILD_ENVIRONMENT: "host"

  # Generate manifest when building snaps.
  SNAPCRAFT_BUILD_INFO: "1"

  # If SNAPCRAFT_PACKAGE_TYPE is "snap" and this variable is defined, spread
  # will install snapcraft from that channel. Otherwise, it'll look for a snap
  # in the source tree. If SNAPCRAFT_PACKAGE_TYPE is "deb" this variable does
  # nothing.
  SNAPCRAFT_CHANNEL: "$(HOST: echo ${SNAPCRAFT_CHANNEL})"

  # Are these unit tests.
  SNAPCRAFT_UNIT_TESTS: "$(HOST: echo ${SNAPCRAFT_UNIT_TESTS})"

  # Show error tracebacks
  SNAPCRAFT_MANAGED_HOST: "yes"

  # Disable all Sentry error reporting
  SNAPCRAFT_ENABLE_ERROR_REPORTING: "no"

  # Print potentially useful debugging info
  SNAPCRAFT_ENABLE_DEVELOPER_DEBUG: "yes"

  # Ensure that we have the right debian configuration for legacy
  DEBIAN_FRONTEND: noninteractive
  DEBIAN_PRIORITY: critical

  TOOLS_DIR: /snapcraft/tests/spread/tools

backends:
  lxd:
    systems:
      # -native is added for clarity and for ubuntu-20.04* to match.
      - ubuntu-16.04
      - ubuntu-18.04
      - ubuntu-20.04
  google:
    location: computeengine/us-east1-b
    systems:
      - ubuntu-16.04-64:
          workers: 12
          image: ubuntu-1604-64
      - ubuntu-18.04-64:
          workers: 18
          image: ubuntu-1804-64
      - ubuntu-20.04-64:
          workers: 6
          image: ubuntu-2004-64

  multipass:
    type: adhoc
    allocate: |
      if [ "$SPREAD_SYSTEM" = "ubuntu-18.04-64" ]; then
        image="18.04"
        instance_name="spread-18-04"
      elif [ "$SPREAD_SYSTEM" = "ubuntu-20.04-64" ]; then
        image="20.04"
        instance_name="spread-20-04"
      else
        FATAL "$SPREAD_SYSTEM is not supported!"
      fi

      multipass launch --disk 20G --mem 2G --name "$instance_name" "$image"

      # Get the IP from the instance
      ip=$(multipass info --format csv "$instance_name" | tail -1 | cut -d\, -f3)
      # Enable PasswordAuthertication for root over SSH.
      multipass exec "$instance_name" -- \
        sudo sh -c "echo root:ubuntu | sudo chpasswd"
      multipass exec "$instance_name" -- \
        sudo sh -c \
        "sed -i /etc/ssh/sshd_config -e 's/^PasswordAuthentication.*/PasswordAuthentication yes/' -e 's/^#PermitRootLogin.*/PermitRootLogin yes/'"
      multipass exec "$instance_name" -- \
        sudo systemctl restart ssh

      ADDRESS "$ip:22"
    discard: |
      if [ "$SPREAD_SYSTEM" = "ubuntu-18.04-64" ]; then
        instance_name="spread-18-04"
      elif [ "$SPREAD_SYSTEM" = "ubuntu-20.04-64" ]; then
        instance_name="spread-20-04"
      else
        FATAL "$SPREAD_SYSTEM is not supported!"
      fi

      multipass delete --purge "$instance_name"
    systems:
      - ubuntu-18.04-64:
          workers: 1
          username: root
          password: ubuntu
      - ubuntu-20.04-64:
          workers: 1
          username: root
          password: ubuntu

  autopkgtest:
    type: adhoc
    allocate: |
      echo "Allocating ad-hoc $SPREAD_SYSTEM"
      if [ -z "${ADT_ARTIFACTS:-}" ]; then
        FATAL "adhoc only works inside autopkgtest"
        exit 1
      fi
      echo 'ubuntu ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/99-spread-users
      ADDRESS localhost:22
    discard: echo "Discarding ad-hoc $SPREAD_SYSTEM"
    systems:
      # No Trusty systems since the deb doesn't exist there
      # Xenial
      - ubuntu-16.04-amd64:
          username: ubuntu
          password: ubuntu
      - ubuntu-16.04-i386:
          username: ubuntu
          password: ubuntu
      - ubuntu-16.04-ppc64el:
          username: ubuntu
          password: ubuntu
      - ubuntu-16.04-armhf:
          username: ubuntu
          password: ubuntu
      - ubuntu-16.04-s390x:
          username: ubuntu
          password: ubuntu
      - ubuntu-16.04-arm64:
          username: ubuntu
          password: ubuntu
      # Bionic
      - ubuntu-18.04-amd64:
          username: ubuntu
          password: ubuntu
      - ubuntu-18.04-i386:
          username: ubuntu
          password: ubuntu
      - ubuntu-18.04-ppc64el:
          username: ubuntu
          password: ubuntu
      - ubuntu-18.04-armhf:
          username: ubuntu
          password: ubuntu
      - ubuntu-18.04-s390x:
          username: ubuntu
          password: ubuntu
      - ubuntu-18.04-arm64:
          username: ubuntu
          password: ubuntu
      # Focal
      - ubuntu-20.04-amd64:
          username: ubuntu
          password: ubuntu
      - ubuntu-20.04-ppc64el:
          username: ubuntu
          password: ubuntu
      - ubuntu-20.04-armhf:
          username: ubuntu
          password: ubuntu
      - ubuntu-20.04-s390x:
          username: ubuntu
          password: ubuntu
      - ubuntu-20.04-arm64:
          username: ubuntu
          password: ubuntu

exclude: [snaps-cache/]

prepare: |
  # This unfortunately cannot be extracted into a standalone script since this
  # portion of of YAML runs before the source code has been fetched.

  # 'apt-get update' is hanging on security.ubuntu.com with IPv6. Prefer IPv4 over
  # IPv6
  cat <<EOF > gai.conf
  precedence  ::1/128       50
  precedence  ::/0          40
  precedence  2002::/16     30
  precedence ::/96          20
  precedence ::ffff:0:0/96 100
  EOF
  if ! mv gai.conf /etc/gai.conf; then
      echo "/etc/gai.conf is not writable, ubuntu-core system? apt-get update won't"
      echo "be affected in that case"
      rm -f gai.conf
  fi

  # Now run 'apt-get update', but don't show output unless it fails. The logs are
  # long enough as it is.
  tempfile="$(mktemp)"
  if ! apt-get update > "$tempfile" 2>&1; then
      cat "$tempfile"
      exit 1
  fi

  # Exit now if we are preparing for unit tests.
  if [ "$SNAPCRAFT_UNIT_TESTS" = "Y" ]; then
      exit 0
  fi

  apt-get install -y snapd
  snap install snapd
  snap wait system seed.loaded

  if [ "$SPREAD_SYSTEM" = "ubuntu-16.04-64" ] || [ "$SPREAD_SYSTEM" = "ubuntu-18.04-64" ] || [ "$SPREAD_SYSTEM" = "ubuntu-20.04-64" ]; then
      # Remove lxd and lxd-client deb packages as our implementation (pylxd) does not
      # nicely handle the snap and deb being installed at the same time.
      apt-get remove --purge --yes lxd lxd-client
      # Install and setup the lxd snap
      snap install lxd
      # Add the ubuntu user to the lxd group.
      adduser ubuntu lxd
  fi

  # Hold snap refreshes for 24h.
  snap set system refresh.hold="$(date --date=tomorrow +%Y-%m-%dT%H:%M:%S%:z)"
  snap watch --last=auto-refresh?
  snap watch --last=install?

  if [ "$SPREAD_SYSTEM" = "ubuntu-16.04-64" ] || [ "$SPREAD_SYSTEM" = "ubuntu-18.04-64" ] || [ "$SPREAD_SYSTEM" = "ubuntu-20.04-64" ]; then
      /snap/bin/lxd waitready --timeout=30
      /snap/bin/lxd init --auto
  fi

  # If $SNAPCRAFT_CHANNEL is defined, install snapcraft from that channel.
  # Otherwise, look for it in /snapcraft/.
  if [ -z "$SNAPCRAFT_CHANNEL" ]; then
    if stat /snapcraft/*.snap 2>/dev/null; then
      snap install --classic --dangerous /snapcraft/*.snap
    else
      echo "Expected a snap to exist in /snapcraft/. If your intention"\
           "was to install from the store, set \$SNAPCRAFT_CHANNEL."
      exit 1
    fi
  else
    snap install --classic snapcraft --channel="$SNAPCRAFT_CHANNEL"
  fi

restore-each: |
  "$TOOLS_DIR"/restore.sh

suites:
 # Unit tests
 tests/spread/unit/:
   summary: unit tests for snapcraft
   manual: true
   systems:
   - ubuntu-18*
   prepare: |
     apt-get update
     apt-get install --yes \
       git \
       libapt-pkg-dev \
       libffi-dev \
       libnacl-dev \
       libsodium-dev \
       libssl-dev \
       libxml2-dev \
       libxslt-dev \
       libyaml-dev \
       python3-venv \
       python3-yaml \
       python3.6-dev \
       rpm2cpio \
       squashfs-tools \
       xdelta3
     apt-mark auto \
       git \
       libapt-pkg-dev \
       libffi-dev \
       libnacl-dev \
       libsodium-dev \
       libssl-dev \
       libxml2-dev \
       libxslt-dev \
       libyaml-dev \
       python3-venv \
       python3-yaml \
       python3.6-dev \
       rpm2cpio \
       squashfs-tools \
       xdelta3
     pyvenv "$HOME/venv/snapcraft"
     # shellcheck source=/dev/null
     source "$HOME/venv/snapcraft/bin/activate"
     pip install --upgrade wheel setuptools
     cd /snapcraft
     pip install -r requirements.txt -r requirements-devel.txt codecov
     pip install -e .
   recover: |
     rm -rf ~/venv

 # General, core suite
 tests/spread/general/:
   summary: tests of snapcraft core functionality
   # TODO: enable once we have python plugin support for core20.
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*

 # Use of multipass and lxd build providers
 tests/spread/build-providers/:
   summary: tests of snapcraft using build providers
   systems:
   - ubuntu-16.04-64
   - ubuntu-18.04-64
   - ubuntu-20.04-64
   kill-timeout: 180m
   warn-timeout: 9m  # Keep less than 10 minutes so Travis can't timeout
   priority: 90  # Run this test relatively early since fetching images can take time

 # Plugin-specific suites
 tests/spread/plugins/v1/ant/:
   summary: tests of snapcraft's Ant plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v1/ament/:
   summary: tests of snapcraft's Ament plugin when not using a base
   systems:
   - ubuntu-16.04-amd64
   - ubuntu-16.04-arm64
   - ubuntu-16.04-armhf
   - ubuntu-16.04
   - ubuntu-16.04-64
   kill-timeout: 360m
 tests/spread/plugins/v1/autotools/:
   summary: tests of snapcraft's Autotools plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v1/catkin/:
   summary: tests of snapcraft's Catkin plugin
   systems:
   - ubuntu-16.04
   - ubuntu-16.04-64
   - ubuntu-16.04-amd64
   - ubuntu-16.04-arm64
   - ubuntu-16.04-armhf
   - ubuntu-18.04
   - ubuntu-18.04-64
   - ubuntu-18.04-amd64
   - ubuntu-18.04-arm64
   - ubuntu-18.04-armhf
   kill-timeout: 180m
 tests/spread/plugins/v1/colcon/:
   summary: tests of snapcraft's Colcon plugin
   systems:
   - ubuntu-18.04
   - ubuntu-18.04-64
   - ubuntu-18.04-amd64
   - ubuntu-18.04-arm64
   - ubuntu-18.04-armhf
   kill-timeout: 180m
 tests/spread/plugins/v1/conda/:
   summary: tests of snapcraft's Conda plugin
   systems:
   - ubuntu-18.04
   - ubuntu-18.04-64
   # Network errors on autopkgtest infra
   # - ubuntu-18.04-amd64
   - ubuntu-16.04
   - ubuntu-16.04-64
   # Network errors on autopkgtest infra
   # - ubuntu-16.04-amd64
 tests/spread/plugins/v1/copy/:
   summary: tests of snapcraft's Copy plugin when not using a base
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v1/cmake/:
   summary: tests of snapcraft's CMake plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v1/crystal/:
   summary: tests of snapcraft's Crystal plugin
   systems:
   - ubuntu-18.04
   - ubuntu-18.04-64
   - ubuntu-18.04-amd64
   - ubuntu-16.04
   - ubuntu-16.04-64
   - ubuntu-16.04-amd64
 tests/spread/plugins/v1/dotnet/:
   summary: tests of snapcraft's Dotnet plugin
   # Keep this 16.04 as it is the only supported system for this plugin
   systems:
   - ubuntu-16.04
   - ubuntu-16.04-64
   - ubuntu-16.04-amd64
 tests/spread/plugins/v1/flutter/:
   summary: tests of snapcraft's Flutter plugin
   # Keep this 18.04 as the tests makes use of the GNOME 3.28 extension.
   systems:
   - ubuntu-18.04
   - ubuntu-18.04-64
   - ubuntu-18.04-amd64
 tests/spread/plugins/v1/go/:
   summary: tests of snapcraft's Go plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v1/godeps/:
   summary: tests of snapcraft's Godeps plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v1/gradle/:
   summary: tests of snapcraft's Gradle plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
   priority: 50  # Run this test early so we're not waiting for it
   kill-timeout: 40m
   warn-timeout: 9m  # Keep less than 10 minutes so Travis can't timeout
 tests/spread/plugins/v1/kbuild/:
   summary: tests of snapcraft's Kbuild plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v1/make/:
   summary: tests of snapcraft's Make plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v1/maven/:
   summary: tests of snapcraft's Maven plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v1/meson/:
   summary: tests of snapcraft's Meson plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v1/nodejs/:
   summary: tests of snapcraft's Nodejs plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v1/nil/:
   summary: tests of snapcraft's Nil plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v1/plainbox/:
   summary: tests of snapcraft's Plainbox plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
   kill-timeout: 20m
   warn-timeout: 9m  # Keep less than 10 minutes so Travis can't timeout
 tests/spread/plugins/v1/python/:
   summary: tests of snapcraft's Python plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v1/qmake/:
   summary: tests of snapcraft's qmake plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v1/ruby/:
   summary: tests of snapcraft's Ruby plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
   kill-timeout: 180m
 tests/spread/plugins/v1/rust/:
   summary: tests of snapcraft's Rust plugin
   systems:
   - ubuntu-18.04
   - ubuntu-18.04-64
   - ubuntu-18.04-amd64
   - ubuntu-18.04-i386
   - ubuntu-18.04-armhf
   - ubuntu-18.04-s390x
   - ubuntu-16.04
   - ubuntu-16.04-64
   - ubuntu-16.04-amd64
   - ubuntu-16.04-i386
   - ubuntu-16.04-armhf
   - ubuntu-16.04-s390x
 tests/spread/plugins/v1/scons/:
   summary: tests of snapcraft's SCons plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v1/tar-content/:
   summary: tests of snapcraft's tar-content plugin when not using a base
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v1/waf/:
   summary: tests of snapcraft's Waf plugin
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v1/x-local/:
   summary: tests of snapcraft's local plugins
   systems:
   - ubuntu-16.04*
   - ubuntu-18.04*
 tests/spread/plugins/v2/:
   summary: tests of snapcraft's v2 plugins
   systems:
   - ubuntu-20.04*

# Extensions tests
 tests/spread/extensions/:
   summary: tests of snapcraft's extensions
   kill-timeout: 20m

# External snap tests
 tests/spread/snaps/:
   systems:
   - ubuntu-18.04-64
   manual: true
   summary: external snaps
   prepare: |
     sudo apt-get install git
     sudo apt-mark auto git

# Legacy tests
 tests/spread/legacy/:
   summary: legacy snapcraft tests

# Legacy pending migration away from python runners
 tests/spread/legacy_python/:
   summary: these tests are pending a migration away from python runners
   kill-timeout: 60m
   warn-timeout: 9m  # Keep less than 10 minutes so Travis can't timeout
   priority: 100  # Run this test early so we're not waiting for it
   systems:
     - ubuntu-18.04*
   environment:
     SNAPCRAFT_PACKAGE_TYPE: "snap"
   prepare: |
     apt-get update
     apt-get install --yes gcc g++ make python3-dev python3-pip python3-wheel libffi-dev libsodium-dev libapt-pkg-dev squashfs-tools xdelta3 bzr git mercurial subversion libxml2-dev libxslt-dev
     pip3 install --user --upgrade wheel setuptools
     pip3 install --user -r /snapcraft/requirements.txt -r /snapcraft/requirements-devel.txt
     # Move the snapcraft modules out of the way
     mv /snapcraft/snapcraft /snapcraft.bak
   restore: |
     mv /snapcraft.bak /snapcraft/snapcraft

path: /snapcraft/
