project: snapcraft

environment:
  # Tell snapcraft to use the current host to build
  SNAPCRAFT_BUILD_ENVIRONMENT: "host"

  # This variable can be set to either "deb" or "snap". It defaults to "snap".
  SNAPCRAFT_PACKAGE_TYPE: "$(HOST: echo ${SNAPCRAFT_PACKAGE_TYPE:-snap})"

  # If SNAPCRAFT_PACKAGE_TYPE is "snap" and this variable is defined, spread
  # will install snapcraft from that channel. Otherwise, it'll look for a snap
  # in the source tree. If SNAPCRAFT_PACKAGE_TYPE is "deb" this variable does
  # nothing.
  SNAPCRAFT_CHANNEL: "$(HOST: echo ${SNAPCRAFT_CHANNEL})"

  # Show error tracebacks
  SNAPCRAFT_MANAGED_HOST: "yes"

  # Disable all Sentry error reporting
  SNAPCRAFT_ENABLE_ERROR_REPORTING: "no"

  # Ensure that we have the right debian configuration for legacy
  DEBIAN_FRONTEND: noninteractive
  DEBIAN_PRIORITY: critical

  TOOLS_DIR: /snapcraft/tests/spread/tools

backends:
  lxd:
    systems:
      - ubuntu-16.04
      - ubuntu-18.04
  google:
    key: "$(HOST: echo $SPREAD_GOOGLE_KEY)"
    location: computeengine/us-east1-b
    systems:
      - ubuntu-16.04-64:
          workers: 12
          image: ubuntu-1604-64
      - ubuntu-18.04-64:
          workers: 18
          image: ubuntu-1804-64
  autopkgtest:
    type: adhoc
    allocate: |
      echo "Allocating ad-hoc $SPREAD_SYSTEM"
      if [ -z "${ADT_ARTIFACTS}" ]; then
        FATAL "adhoc only works inside autopkgtest"
        exit 1
      fi
      echo 'ubuntu ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/99-spread-users
      ADDRESS localhost:22
    discard: echo "Discarding ad-hoc $SPREAD_SYSTEM"
    systems:
      # No Trusty systems since the deb doesn't exist there
      # Xenial
      - ubuntu-16.04-amd64:
          username: ubuntu
          password: ubuntu
      - ubuntu-16.04-i386:
          username: ubuntu
          password: ubuntu
      - ubuntu-16.04-ppc64el:
          username: ubuntu
          password: ubuntu
      - ubuntu-16.04-armhf:
          username: ubuntu
          password: ubuntu
      - ubuntu-16.04-s390x:
          username: ubuntu
          password: ubuntu
      - ubuntu-16.04-arm64:
          username: ubuntu
          password: ubuntu
      # Bionic
      - ubuntu-18.04-amd64:
          username: ubuntu
          password: ubuntu
      - ubuntu-18.04-i386:
          username: ubuntu
          password: ubuntu
      - ubuntu-18.04-ppc64el:
          username: ubuntu
          password: ubuntu
      - ubuntu-18.04-armhf:
          username: ubuntu
          password: ubuntu
      - ubuntu-18.04-s390x:
          username: ubuntu
          password: ubuntu
      - ubuntu-18.04-arm64:
          username: ubuntu
          password: ubuntu

exclude: [snaps-cache/]

prepare: |
  # This unfortunately cannot be extracted into a standalone script since this
  # portion of of YAML runs before the source code has been fetched.

  # 'apt-get update' is hanging on security.ubuntu.com with IPv6. Prefer IPv4 over
  # IPv6
  cat <<EOF > gai.conf
  precedence  ::1/128       50
  precedence  ::/0          40
  precedence  2002::/16     30
  precedence ::/96          20
  precedence ::ffff:0:0/96 100
  EOF
  if ! mv gai.conf /etc/gai.conf; then
      echo "/etc/gai.conf is not writable, ubuntu-core system? apt-get update won't"
      echo "be affected in that case"
      rm -f gai.conf
  fi

  # Now run 'apt-get update', but don't show output unless it fails. The logs are
  # long enough as it is.
  tempfile="$(mktemp)"
  if ! apt-get update > "$tempfile" 2>&1; then
      cat "$tempfile"
      exit 1
  fi

  apt-get install -y snapd

  if [ "$SPREAD_SYSTEM" = "ubuntu-16.04-64" ] || [ "$SPREAD_SYSTEM" = "ubuntu-18.04-64" ]; then
      # Remove lxd and lxd-client deb packages as our implementation (pylxd) does not
      # nicely handle the snap and deb being installed at the same time.
      apt-get remove --purge --yes lxd lxd-client
      # Install and setup the lxd snap
      snap install lxd
      lxd waitready --timeout=30
      lxd init --auto
      # Add the ubuntu user to the lxd group.
      adduser ubuntu lxd
  fi

  if [ "$SNAPCRAFT_PACKAGE_TYPE" = "deb" ]; then
      apt-get install -y snapcraft
  elif [ "$SNAPCRAFT_PACKAGE_TYPE" = "snap" ]; then
      # If $SNAPCRAFT_CHANNEL is defined, install snapcraft from that channel.
      # Otherwise, look for it in /snapcraft/.
      if [ -z "$SNAPCRAFT_CHANNEL" ]; then
          if stat /snapcraft/*.snap 2>/dev/null; then
              snap install --classic --dangerous /snapcraft/*.snap
          else
              echo "Expected a snap to exist in /snapcraft/. If your intention"\
                   "was to install from the store, set \$SNAPCRAFT_CHANNEL."
              exit 1
          fi
      else
          snap install --classic snapcraft --channel="$SNAPCRAFT_CHANNEL"
      fi
  else
    echo "'$SNAPCRAFT_PACKAGE_TYPE' is not a supported snapcraft package type."\
         " Supported types are 'deb' and 'snap'."
    exit 1
  fi

restore-each: |
  "$TOOLS_DIR"/restore.sh

suites:
 # General, core suite
 tests/spread/general/:
   summary: tests of snapcraft core functionality

 # Use of multipass and lxd build providers
 tests/spread/build-providers/:
   summary: tests of snapcraft using build providers
   systems: [ubuntu-18.04-64]
   kill-timeout: 180m
   warn-timeout: 9m  # Keep less than 10 minutes so Travis can't timeout
   priority: 90  # Run this test relatively early since fetching images can take time

 # Plugin-specific suites
 tests/spread/plugins/ant/:
   summary: tests of snapcraft's Ant plugin
 tests/spread/plugins/ament/:
   summary: tests of snapcraft's Ament plugin when not using a base
   systems:
   - ubuntu-16.04-amd64
   - ubuntu-16.04-arm64
   - ubuntu-16.04-armhf
   - ubuntu-16.04
   - ubuntu-16.04-64
   kill-timeout: 360m
 tests/spread/plugins/autotools/:
   summary: tests of snapcraft's Autotools plugin
 tests/spread/plugins/catkin/:
   summary: tests of snapcraft's Catkin plugin
   systems:
   - ubuntu-16.04
   - ubuntu-16.04-64
   - ubuntu-16.04-amd64
   - ubuntu-16.04-arm64
   - ubuntu-16.04-armhf
   - ubuntu-18.04
   - ubuntu-18.04-64
   - ubuntu-18.04-amd64
   - ubuntu-18.04-arm64
   - ubuntu-18.04-armhf
   kill-timeout: 180m
 tests/spread/plugins/colcon/:
   summary: tests of snapcraft's Colcon plugin
   systems:
   - ubuntu-18.04
   - ubuntu-18.04-64
   - ubuntu-18.04-amd64
   - ubuntu-18.04-arm64
   - ubuntu-18.04-armhf
   kill-timeout: 180m
 tests/spread/plugins/conda/:
   summary: tests of snapcraft's Conda plugin
   systems:
   - ubuntu-18.04
   - ubuntu-18.04-64
   # Network errors on autopkgtest infra
   # - ubuntu-18.04-amd64
   - ubuntu-16.04
   - ubuntu-16.04-64
   # Network errors on autopkgtest infra
   # - ubuntu-16.04-amd64
 tests/spread/plugins/copy/:
   summary: tests of snapcraft's Copy plugin when not using a base
 tests/spread/plugins/cmake/:
   summary: tests of snapcraft's CMake plugin
 tests/spread/plugins/crystal/:
   summary: tests of snapcraft's Crystal plugin
   systems:
   - ubuntu-18.04
   - ubuntu-18.04-64
   - ubuntu-18.04-amd64
   - ubuntu-16.04
   - ubuntu-16.04-64
   - ubuntu-16.04-amd64
 tests/spread/plugins/dotnet/:
   summary: tests of snapcraft's Dotnet plugin
   # Keep this 16.04 as it is the only supported system for this plugin
   systems:
   - ubuntu-16.04
   - ubuntu-16.04-64
   - ubuntu-16.04-amd64
 tests/spread/plugins/go/:
   summary: tests of snapcraft's Go plugin
 tests/spread/plugins/godeps/:
   summary: tests of snapcraft's Godeps plugin
 tests/spread/plugins/gradle/:
   summary: tests of snapcraft's Gradle plugin
   priority: 50  # Run this test early so we're not waiting for it
   kill-timeout: 40m
   warn-timeout: 9m  # Keep less than 10 minutes so Travis can't timeout
 tests/spread/plugins/kbuild/:
   summary: tests of snapcraft's Kbuild plugin
 tests/spread/plugins/make/:
   summary: tests of snapcraft's Make plugin
 tests/spread/plugins/maven/:
   summary: tests of snapcraft's Maven plugin
 tests/spread/plugins/meson/:
   summary: tests of snapcraft's Meson plugin
 tests/spread/plugins/nodejs/:
   summary: tests of snapcraft's Nodejs plugin
 tests/spread/plugins/nil/:
   summary: tests of snapcraft's Nil plugin
 tests/spread/plugins/plainbox/:
   summary: tests of snapcraft's Plainbox plugin
   kill-timeout: 20m
   warn-timeout: 9m  # Keep less than 10 minutes so Travis can't timeout
 tests/spread/plugins/python/:
   summary: tests of snapcraft's Python plugin
 tests/spread/plugins/qmake/:
   summary: tests of snapcraft's qmake plugin
 tests/spread/plugins/ruby/:
   summary: tests of snapcraft's Ruby plugin
   kill-timeout: 180m
 tests/spread/plugins/rust/:
   summary: tests of snapcraft's Rust plugin
   # Keep this 18.04 only for now as it is the only stable base.
   systems:
   - ubuntu-18.04
   - ubuntu-18.04-64
   - ubuntu-18.04-amd64
   - ubuntu-18.04-i386
   - ubuntu-18.04-armhf
   - ubuntu-16.04
   - ubuntu-16.04-64
   - ubuntu-16.04-amd64
   - ubuntu-16.04-i386
   - ubuntu-16.04-armhf
 tests/spread/plugins/scons/:
   summary: tests of snapcraft's SCons plugin
 tests/spread/plugins/tar-content/:
   summary: tests of snapcraft's tar-content plugin when not using a base
 tests/spread/plugins/waf/:
   summary: tests of snapcraft's Waf plugin

# Extensions tests
 tests/spread/extensions/:
   summary: tests of snapcraft's extensions
   systems: [ubuntu-18.04*]

# Legacy tests
 tests/spread/legacy/:
   summary: legacy snapcraft tests

# Legacy pending migration away from python runners
 tests/spread/legacy_python/:
   summary: these tests are pending a migration away from python runners
   kill-timeout: 60m
   warn-timeout: 9m  # Keep less than 10 minutes so Travis can't timeout
   priority: 100  # Run this test early so we're not waiting for it
   systems:
     - ubuntu-16.04*
     - ubuntu-18.04*
   environment:
     # TODO: make generic
     PIP_COMMAND: "/root/.local/bin/pip"
   prepare: |
     apt-get update
     apt-get install --yes gcc g++ make python3-dev python3-pip python3-wheel libffi-dev libsodium-dev libapt-pkg-dev squashfs-tools xdelta3 bzr git mercurial subversion libxml2-dev libxslt-dev
     pip3 install --user --upgrade pip
     $PIP_COMMAND install --user -r /snapcraft/requirements.txt -r /snapcraft/requirements-devel.txt
     # Move the snapcraft modules out of the way
     mv /snapcraft/snapcraft /snapcraft.bak
   restore: |
     mv /snapcraft.bak /snapcraft/snapcraft

path: /snapcraft/
