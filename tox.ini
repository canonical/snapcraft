# Differences from the starbase tox.ini:
# * Uses requirements-devel.txt
# * No library code for pyright type checking
# * Documentation envs removed
# * Pytest uses wheel package
# * Legacy tests instead of integration tests
# * Additional test environment "noreq" runs all the tests without requirements.txt
# * lint-shellcheck includes spread-shellcheck.py
# * Additional ruff configuration for snapcraft_legacy
# * Do not use tmpfs for a temporary directory as it does not support user xattrs
# * Legacy tests (inherited from integration tests) include coverage
# * Pylint included

[tox]
env_list =  # Environments to run when called with no parameters.
    lint-{black,ruff,mypy,pylint,pyright,shellcheck,codespell,yaml}
    test-py310
    test-legacy-py310
minversion = 4.5
# Tox will use these requirements to bootstrap a venv if necessary.
# tox-igore-env-name-mismatch allows us to have one virtualenv for all linting.
# By setting requirements here, we make this INI file compatible with older
# versions of tox. Tox >= 3.8 will automatically provision the version provided
# inside of a virtual environment, so users of Ubuntu >= focal can simply
# install tox from apt. Older than that, the user gets an upgrade warning.
requires =
    # renovate: datasource=pypi
    tox-ignore-env-name-mismatch==0.2.0.post2
    # renovate: datasource=pypi
    tox-gh==1.3.1
# Allow tox to access the user's $TMPDIR environment variable if set.
# This workaround is required to avoid circular dependencies for TMPDIR,
# since tox will otherwise attempt to use the environment's TMPDIR variable.
user_tmp_dir = {env:TMPDIR}

[testenv]  # Default config for all environments. Overridable in each env.
# We have many tests that create temporary files. Unless the user has set a
# TMPDIR, this will prefer putting those temp files in $XDG_RUNTIME_DIR,
# which will speed up those tests since they'll run on a ramdisk.
env_tmp_dir = {user_tmp_dir:{work_dir}}/tox_tmp/{env_name}
set_env =
    SNAPCRAFT_IGNORE_YAML_BINDINGS = 1
    TMPDIR={env_tmp_dir}
    COVERAGE_FILE={env_tmp_dir}/.coverage_{env_name}

[test]  # Base configuration for unit and integration tests
deps = -r{tox_root}/requirements-devel.txt
package = wheel
allowlist_externals = mkdir
commands_pre = mkdir -p results

[testenv:test-{py39,py310,py311,py312}]  # Configuration for all tests using pytest
base = testenv, test
description = Run unit tests with pytest
labels =
    py310, py311: tests, unit-tests
commands = pytest {tty:--color=yes} --cov=snapcraft --cov-report=xml:results/coverage-{env_name}.xml --junit-xml=results/test-results-{env_name}.xml {posargs:tests/unit}

[testenv:test-legacy-{py39,py310,py311,py312}]
base = testenv, test
description = Run legacy tests with pytest
labels =
    py310, py311: tests, integration-tests
commands = pytest {tty:--color=yes} --cov=snapcraft_legacy --cov-report=xml:results/coverage-{env_name}.xml --junit-xml=results/test-results-{env_name}.xml {posargs:tests/legacy}

[testenv:test-noreq]
base = testenv
description = Run all tests without using requirements.txt
package = wheel
deps = python-apt@https://launchpad.net/ubuntu/+archive/primary/+sourcefiles/python-apt/2.4.0ubuntu1/python-apt_2.4.0ubuntu1.tar.xz
extras = dev
allowlist_externals = mkdir
commands_pre = mkdir -p results
commands =
    pytest {tty:--color=yes} --cov=snapcraft --cov-report=xml:results/coverage-{env_name}.xml --junit-xml=results/test-results-{env_name}.xml tests/unit {posargs}
    pytest {tty:--color=yes} --junit-xml=results/legacy-test-results-{env_name}.xml tests/legacy {posargs}

[lint]  # Standard linting configuration
package = editable
extras = dev
env_dir = {work_dir}/linting
runner = ignore_env_name_mismatch

[shellcheck]
find = git ls-files --empty-directory --deduplicate
filter = file --mime-type -Nnf- | grep shellscript$ | cut -f1 -d:
spread_filter = grep -E "^tests/spread/.*(spread|task)\.yaml$"

[testenv:lint-{black,ruff,docstyle,shellcheck,codespell,yaml}]
description = Lint the source code
base = testenv, lint
labels = lint
allowlist_externals =
    shellcheck: bash, xargs
    ruff: ruff
commands_pre =
    shellcheck: bash -c '{[shellcheck]find} | {[shellcheck]filter} > {env_tmp_dir}/shellcheck_files'
    shellcheck: bash -c '{[shellcheck]find} | {[shellcheck]spread_filter} > {env_tmp_dir}/spread_shellcheck_files'
commands =
    black: black --check --diff {tty:--color} {posargs} .
    ruff: ruff check --diff --respect-gitignore {posargs}
    docstyle: pydocstyle snapcraft
    shellcheck: xargs -ra {env_tmp_dir}/shellcheck_files shellcheck
    shellcheck: xargs -ra {env_tmp_dir}/spread_shellcheck_files python3 tools/spread-shellcheck.py spread.yaml
    codespell: codespell --toml {tox_root}/pyproject.toml {posargs}
    yaml: yamllint {posargs} .

[testenv:lint-pylint]
description = Lint with pylint
base = testenv
labels = lint
deps = -r{tox_root}/requirements-devel.txt
package = editable
# This runs all commands even if the first fails.
# Not to be confused with ignore_outcome, which turns errors into warnings.
ignore_errors = true
commands =
    pylint -j 0 snapcraft
    pylint -j 0 tests --disable=invalid-name,missing-module-docstring,missing-function-docstring,duplicate-code,protected-access,unspecified-encoding,too-many-public-methods,too-many-arguments,too-many-lines,redefined-outer-name

[testenv:lint-{mypy,pyright}]
description = Static type checking
base = testenv
deps =
    -r{tox_root}/requirements-devel.txt
env_dir = {work_dir}/typing
runner = ignore_env_name_mismatch
package = editable
extras = [dev, types]
labels = lint, type
allowlist_externals =
    pyright: pyright
    mypy: mkdir
commands_pre =
    mypy: mkdir -p .mypy_cache
commands =
    pyright: pyright {posargs}
    mypy: mypy --install-types --non-interactive --exclude 'docs/sphinx-resources/conf.py' --exclude 'docs/common' .

[testenv:format-{black,ruff,codespell}]
description = Automatically format source code
base = testenv, lint
labels = format
allowlist_externals:
    ruff: ruff
commands =
    black: black {tty:--color} {posargs} .
    ruff: ruff --fix --respect-gitignore setup.py snapcraft tests tools
    ruff: ruff --fix --config snapcraft_legacy/ruff.toml snapcraft_legacy tests/legacy
    codespell: codespell --toml {tox_root}/pyproject.toml --write-changes {posargs}

[docs]  # Sphinx documentation configuration
extras = docs
package = editable
no_package = true
env_dir = {work_dir}/docs
runner = ignore_env_name_mismatch
deps =
    -r{tox_root}/docs/requirements.txt

[testenv:build-docs]
description = Build sphinx documentation
base = docs
allowlist_externals = bash
commands_pre =
    bash -c 'if [[ ! -e docs ]];then echo "No docs directory. Run `tox run -e sphinx-quickstart` to create one.;";return 1;fi'
    bash -c 'git submodule update --init docs/sphinx-resources'
# "-W" is to treat warnings as errors
commands = sphinx-build {posargs:-b html} -W {tox_root}/docs {tox_root}/docs/_build

[testenv:autobuild-docs]
description = Build documentation with an autoupdating server
base = docs
commands = sphinx-autobuild {posargs:-b html --open-browser --port 8080} -W --watch {tox_root}/snapcraft {tox_root}/snapcraft_legacy {tox_root}/docs {tox_root}/docs/_build

[testenv:lint-docs]
description = Lint the documentation with sphinx-lint
base = docs
commands = sphinx-lint --ignore docs/_build --ignore docs/sphinx-resources -e all {posargs} docs/
labels = lint
