# Differences from the starbase tox.ini:
# * Uses requirements-devel.txt
# * No library code for pyright type checking
# * Documentation envs removed
# * Pytest uses wheel package
# * Legacy tests instead of integration tests
# * Additional test environment "noreq" runs all the tests without requirements.txt
# * lint-shellcheck includes spread-shellcheck.py
# * Additional ruff configuration for snapcraft_legacy
# * Include isort
# * Do not use tmpfs for a temporary directory as it does not support user xattrs
# * Legacy tests (inherited from integration tests) include coverage

[tox]
env_list =  # Environments to run when called with no parameters.
    lint-{black,ruff,isort,mypy,pyright,shellcheck,codespell,yaml}
    test-py38
    test-legacy-py38
minversion = 3.8
# Tox will use these requirements to bootstrap a venv if necessary.
# tox-igore-env-name-mismatch allows us to have one virtualenv for all linting.
# By setting requirements here, we make this INI file compatible with older
# versions of tox. Tox >= 3.8 will automatically provision the version provided
# inside of a virtual environment, so users of Ubuntu >= focal can simply
# install tox from apt. Older than that, the user gets an upgrade warning.
requires =
    # renovate: datasource=pypi
    tox==4.4.6
    # renovate: datasource=pypi
    tox-ignore-env-name-mismatch==0.2.0.post2
# Allow tox to access the user's $TMPDIR environment variable if set.
# This workaround is required to avoid circular dependencies for TMPDIR,
# since tox will otherwise attempt to use the environment's TMPDIR variable.
user_tmp_dir = {env:TMPDIR}

[testenv]  # Default config for all environments. Overridable in each env.
# We have many tests that create temporary files. Unless the user has set a
# TMPDIR, this will prefer putting those temp files in $XDG_RUNTIME_DIR,
# which will speed up those tests since they'll run on a ramdisk.
env_tmp_dir = {user_tmp_dir:{work_dir}}/tox_tmp/{env_name}
set_env =
    SNAPCRAFT_IGNORE_YAML_BINDINGS = 1
    TMPDIR={env_tmp_dir}
    COVERAGE_FILE={env_tmp_dir}/.coverage_{env_name}

[test]  # Base configuration for unit and integration tests
deps = -r{tox_root}/requirements-devel.txt
package = wheel
allowlist_externals = mkdir
commands_pre = mkdir -p results

[testenv:test-{py38,py39,py310,py311,py312}]  # Configuration for all tests using pytest
base = testenv, test
description = Run unit tests with pytest
labels =
    py38, py310, py311: tests, unit-tests
commands = pytest {tty:--color=yes} --cov --cov-report=xml:results/coverage-{env_name}.xml --junit-xml=results/test-results-{env_name}.xml {posargs:tests/unit}

[testenv:test-legacy-{py38,py39,py310,py311,py312}]
base = testenv, test
description = Run legacy tests with pytest
labels =
    py38, py310, py311: tests, integration-tests
commands = pytest {tty:--color=yes} --cov --cov-report=xml:results/coverage-{env_name}.xml --junit-xml=results/test-results-{env_name}.xml {posargs:tests/legacy}

[testenv:test-noreq]
base = testenv
description = Run all tests without using requirements.txt
package = wheel
deps = python-apt@http://archive.ubuntu.com/ubuntu/pool/main/p/python-apt/python-apt_2.4.0ubuntu1.tar.xz
extras = dev
allowlist_externals = mkdir
commands_pre = mkdir -p results
commands =
    pytest {tty:--color=yes} --cov --cov-report=xml:results/coverage-{env_name}.xml --junit-xml=results/test-results-{env_name}.xml tests/unit {posargs}
    pytest {tty:--color=yes} --junit-xml=results/legacy-test-results-{env_name}.xml tests/legacy {posargs}

[lint]  # Standard linting configuration
skip_install = true
deps =
    # renovate: datasource=pypi
    black==23.1.0
    # renovate: datasource=pypi
    ruff==0.0.220
    # renovate: datasource=pypi
    codespell[tomli]==2.2.2
    # renovate: datasource=pypi
    yamllint==1.29.0
    # renovate: datasource=pypi
    isort==5.11.4
    # renovate: datasource=pypi
    pydocstyle==6.2.3
    python-apt@http://archive.ubuntu.com/ubuntu/pool/main/p/python-apt/python-apt_2.4.0ubuntu1.tar.xz
env_dir = {work_dir}/linting
runner = ignore_env_name_mismatch

[shellcheck]
find = git ls-files
filter = file --mime-type -Nnf- | grep shellscript | cut -f1 -d:

[testenv:lint-{black,ruff,docstyle,isort,shellcheck,codespell,yaml}]
description = Lint the source code
base = testenv, lint
labels = lint
allowlist_externals =
    shellcheck: bash, xargs
commands_pre =
    shellcheck: bash -c '{[shellcheck]find} | {[shellcheck]filter} > {env_tmp_dir}/shellcheck_files'
commands =
    black: black --check --diff {tty:--color} {posargs} .
    ruff: ruff --diff --respect-gitignore setup.py snapcraft tests tools
    ruff: ruff --config snapcraft_legacy/ruff.toml snapcraft_legacy tests/legacy
    isort: isort --check snapcraft snapcraft_legacy tests setup.py tools
    docstyle: pydocstyle snapcraft
    shellcheck: xargs -ra {env_tmp_dir}/shellcheck_files shellcheck
    shellcheck: python3 tools/spread-shellcheck.py spread.yaml tests/spread/
    codespell: codespell --toml {tox_root}/pyproject.toml {posargs}
    yaml: yamllint {posargs} .

[testenv:lint-{mypy,pyright}]
description = Static type checking
base = testenv
deps =
    -r{tox_root}/requirements-devel.txt
env_dir = {work_dir}/typing
runner = ignore_env_name_mismatch
package = editable
extras = [dev, types]
labels = lint, type
allowlist_externals =
    pyright: pyright
    mypy: mkdir
commands_pre =
    mypy: mkdir -p .mypy_cache
commands =
    pyright: pyright {posargs}
    mypy: mypy --install-types --non-interactive .

[testenv:format-{black,ruff,codespell}]
description = Automatically format source code
base = testenv, lint
labels = format
commands =
    black: black {tty:--color} {posargs} .
    ruff:
        ruff --fix --respect-gitignore setup.py snapcraft tests tools
        ruff --fix --config snapcraft_legacy/ruff.toml snapcraft_legacy tests/legacy
    codespell: codespell --toml {tox_root}/pyproject.toml --write-changes {posargs}
