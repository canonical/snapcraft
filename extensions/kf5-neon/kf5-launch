#!/bin/bash

if [ "$SNAP_ARCH" == "amd64" ]; then
  ARCH='x86_64-linux-gnu'
elif [ "$SNAP_ARCH" == "armhf" ]; then
  ARCH="arm-linux-gnueabihf"
else
  ARCH="$SNAP_ARCH-linux-gnu"
fi

KF5=$SNAP/kf5
if [ ! -d $KF5 ]; then
  # This litters the paths a bit by essentially duplicating everything, but
  # that seems simplest to have both kf5 and !kf5 work with the same code.
  KF5=$SNAP
fi

if [ ! -d $KF5/usr ]; then
  source /etc/os-release
  runtime="kde-frameworks-5"
  slot="kde-frameworks-5:kde-frameworks-5-slot"
  if [ "$VERSION" == "18" ]; then
    runtime="kde-frameworks-5-core18"
    slot="kde-frameworks-5-core18:kde-frameworks-5-core18-slot"
  fi

  echo "You need to connect this snap to the $runtime snap."
  echo ""
  echo "You can do this with those commands:"
  echo "snap install $runtime"
  echo "snap refresh $runtime"
  echo "snap connect $SNAP_NAME:kde-frameworks-5-plug $slot"
  exit 1
fi

if [ -n "$KF5_SNAP_COMMON_HOME" ]; then
  # https://forum.snapcraft.io/t/home-why-is-it-versioned/9708/2
  export HOME=$SNAP_USER_COMMON
fi

export PATH=$PATH:$SNAP/usr/bin:$SNAP/usr/sbin:$KF5/usr/bin:$KF5/usr/sbin
# https://bugs.launchpad.net/snapcraft/+bug/1661023
# / in the snap is basically ubuntu-core.
export PATH=$PATH:/usr/local/sbin:/usr/local/bin

export LD_LIBRARY_PATH=$KF5/lib:$KF5/lib/$ARCH:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=$KF5/usr/lib:$KF5/usr/lib/$ARCH:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=$SNAP/lib:$SNAP/lib/$ARCH:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=$SNAP/usr/lib:$SNAP/usr/lib/$ARCH:$LD_LIBRARY_PATH

# XKB config
export XKB_CONFIG_ROOT=$KF5/usr/share/X11/xkb

# Mesa Libs
export LD_LIBRARY_PATH=$KF5/usr/lib/$ARCH/mesa:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=$KF5/usr/lib/$ARCH/mesa-egl:$LD_LIBRARY_PATH

# libGL Drivers
export LIBGL_DRIVERS_PATH=$KF5/usr/lib/$ARCH/dri
export LD_LIBRARY_PATH=$LIBGL_DRIVERS_PATH:$LD_LIBRARY_PATH

# Grab proprietary nvidia mount when possible.
# https://bugs.launchpad.net/snappy/+bug/1588192
export LD_LIBRARY_PATH=/var/lib/snapd/lib/gl:$LD_LIBRARY_PATH

# Pulseaudio plugins
export LD_LIBRARY_PATH=$KF5/usr/lib/$ARCH/pulseaudio:$LD_LIBRARY_PATH

# Necessary for the SDK to find the translations directory
# FIXME: do we (kde) really need this?
export APP_DIR=$SNAP

export XDG_CONFIG_DIRS=$SNAP/etc/xdg:$KF5/etc/xdg:${XDG_CONFIG_DIRS:-/etc/xdg}

export XDG_DATA_DIRS=$SNAP/usr/local/share:$SNAP/usr/share:$KF5/usr/local/share:$KF5/usr/share:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}

export XDG_DATA_HOME=$SNAP_USER_DATA/.local/share
mkdir -p $XDG_DATA_HOME

export XDG_CONFIG_HOME=$SNAP_USER_DATA/.config
mkdir -p $XDG_CONFIG_HOME

if [ -e $SNAP_USER_DATA/.local/config/kdeglobals ]; then
  # Migrate legacy path previously (incorrectly) used for configs.
  # The current var $HOME/.config is in line with the XDG default.
  cp -rv $SNAP_USER_DATA/.local/config/. $XDG_CONFIG_HOME
  rm -rv $SNAP_USER_DATA/.local/config/
fi

export XDG_CACHE_HOME=$SNAP_USER_DATA/.cache
mkdir -p $XDG_CACHE_HOME

export XDG_RUNTIME_DIR=$SNAP_USER_DATA/.local/var/run/$UID
mkdir -p $XDG_RUNTIME_DIR

# Font Config
export FONTCONFIG_PATH=$KF5/etc/fonts/config.d
export FONTCONFIG_FILE=$XDG_CONFIG_HOME/fontconfig/fonts.conf

REALHOME=`getent passwd $UID | cut -d ':' -f 6`
# Keep an array of data dirs, for looping through them
IFS=':' read -r -a data_dirs_array <<< "$XDG_DATA_DIRS"

function make_user_fontconfig {
  echo "<fontconfig>"
  if [ -d $REALHOME/.local/share/fonts ]; then
    echo "  <dir>$REALHOME/.local/share/fonts</dir>"
  fi
  if [ -d $REALHOME/.fonts ]; then
    echo "  <dir>$REALHOME/.fonts</dir>"
  fi
  for d in "${data_dirs_array[@]}"; do
    if [ -d "$d/fonts" ]; then
      echo "  <dir>$d/fonts</dir>"
    fi
  done
  echo '  <include ignore_missing="yes">conf.d</include>'
  # We need to include this default cachedir first so that caching
  # works: without it, fontconfig will try to write to the real user home
  # cachedir and be blocked by AppArmor.
  echo '  <cachedir prefix="xdg">fontconfig</cachedir>'
  if [ -d $REALHOME/.cache/fontconfig ]; then
    echo "  <cachedir>$REALHOME/.cache/fontconfig</cachedir>"
  fi
  echo "</fontconfig>"
}

# This relies on the desktop, x11, or unity7 interface from what I can tell.
# We'll configure the in-snap fontconfig to look in the outside resoruces,
# the outside resources are made readable by the aforementioned interfaces.
rm -rf $XDG_DATA_HOME/{fontconfig,fonts,fonts-*,themes,.themes}
mkdir -p $XDG_CONFIG_HOME/fontconfig
make_user_fontconfig > $FONTCONFIG_FILE

# GStreamer
export GST_PLUGIN_PATH_1_0=$SNAP/usr/lib/$ARCH/gstreamer-1.0/:$KF5/usr/lib/$ARCH/gstreamer-1.0/

# Qt Libs
export LD_LIBRARY_PATH=$KF5/usr/lib/$ARCH/qt5/libs:$LD_LIBRARY_PATH

# Qt Modules
#
# /usr/lib/arch/ is used for (e.g.) grantlee which uses a hardcoded path on top
# of QT_PLUGIN_PATH (if it didn't have the hardcoded variant this wouldn't work
# outside snaps either...
export QT_PLUGIN_PATH=$QT_PLUGIN_PATH:$SNAP/usr/lib/$ARCH/qt5/plugins:$SNAP/usr/lib/$ARCH/
export QT_PLUGIN_PATH=$QT_PLUGIN_PATH:$KF5/usr/lib/$ARCH/qt5/plugins:$KF5/usr/lib/$ARCH/
export QML2_IMPORT_PATH=$QML2_IMPORT_PATH:$SNAP/usr/lib/$ARCH/qt5/qml
export QML2_IMPORT_PATH=$QML2_IMPORT_PATH:$SNAP/lib/$ARCH
export QML2_IMPORT_PATH=$QML2_IMPORT_PATH:$KF5/usr/lib/$ARCH/qt5/qml
export QML2_IMPORT_PATH=$QML2_IMPORT_PATH:$KF5/lib/$ARCH

# Qt Webengine
export QTWEBENGINEPROCESS_PATH=$KF5/usr/lib/$ARCH/qt5/libexec/QtWebEngineProcess

# Removes Qt warning: Could not find a location
# of the system Compose files
export QTCOMPOSE=$KF5/usr/share/X11/locale
export QT_XKB_CONFIG_ROOT=/usr/share/X11/xkb

# FIXME: it's unclear if we actually need to force plasma theming, even without
#   gtk integration theme Qt should probably figure out a sane style. Needs
#   testing though.
export KDE_FULL_SESSION=true
export DESKTOP_SESSION=${DESKTOP_SESSION:-/usr/share/xsessions/plasma}
export XDG_SESSION_DESKTOP=${XDG_SESSION_DESKTOP:-KDE}
export XDG_CURRENT_DESKTOP=${XDG_CURRENT_DESKTOP:-KDE}
export QT_QPA_PLATFORMTHEME=${QT_QPA_PLATFORMTHEME:-kde}

# KDE specific
## Do not start slaves through klauncher but fork them directly.
export KDE_FORK_SLAVES=1
## Neon PATCH! make KIO look for slaves in a dynamic location depending on $SNAP
## FIXME: should be made a : separated list so we can look in $SNAP and $KF5!
export KF5_LIBEXEC_DIR=$KF5/usr/lib/$ARCH/libexec/kf5

# Link icons into home so (xcursor) can find its cursor theme.
mkdir -p $HOME/.icons
ln -fs $KF5/usr/share/icons/* $HOME/.icons

# Make sure QtChooser isn't being terrible to us
export QTCHOOSER_NO_GLOBAL_DIR=1
export QT_SELECT=5
# qtchooser hardcodes reference paths, we'll need to rewrite them properly
[ -d $XDG_CONFIG_HOME/qtchooser ] || mkdir -p $XDG_CONFIG_HOME/qtchooser
echo "$SNAP/usr/lib/qt5/bin" > $XDG_CONFIG_HOME/qtchooser/5.conf
echo "$SNAP/usr/lib/$ARCH" >> $XDG_CONFIG_HOME/qtchooser/5.conf
echo "$SNAP/usr/lib/qt5/bin" > $XDG_CONFIG_HOME/qtchooser/default.conf
echo "$SNAP/usr/lib/$ARCH" >> $XDG_CONFIG_HOME/qtchooser/default.conf

# This relies on qtbase patch
# 0001-let-qlibraryinfo-fall-back-to-locate-qt.conf-via-XDG.patch
# to make QLibraryInfo look in XDG_* locations for qt.conf. The paths configured
# here are applied to everything that uses QLibraryInfo as final fallback and
# has no XDG_* fallback before that. Currently the most interesting offender
# is QtWebEngine which will not work unless the Data path is correctly set.
cat << EOF > $XDG_CONFIG_HOME/qt.conf
[Paths]
Data = $KF5/usr/share/qt5/
Translations = $KF5/usr/share/qt5/translations
EOF

# requires `locales, libc-bin` being stage-packages
if [ -e $KF5/usr/share/i18n ]; then
  export I18NPATH=$KF5/usr/share/i18n
  locpath=$XDG_DATA_HOME/locale
  mkdir -p $locpath
  export LOCPATH=$locpath:/usr/lib/locale # core snap contains C.UTF-8 already
  LC_ALL=C.UTF-8 $SNAP/kf5-locale-gen || exit 1
fi

exec "$@"
