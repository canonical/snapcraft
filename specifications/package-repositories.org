#+TITLE: Package Repositories
#+AUTHOR: Chris Patterson <chris.patterson@canonical.com>
#+DATE: [2020-04-21]

* Scope

This feature adds a high-level key package-management to snapcraft.yaml that
enables users to configure additional repositories & components. Specifically,
the scope of package-management is for anything affecting the behavior and
availability of:

- build-packages
- stage-packages
- build-snaps
- stage-snaps
- python-packages

The scope of this spec will focus on the configuration of =apt= repositories,
affecting the availability of =build-packages= and =stage-packages=.

* Enabling the feature

Configure =package-repositories= in snapcraft.yaml.

As an experimental feature, =--enable-experimental-package-repositories= will be
required. Snapcraft will log a warning that the feature is experimental until
the schema is to be considered stable.

* Schema for package-repositories

- *Type:* list[package-repository]

- *Description:* array of repositories.

* Schema for APT PPA shortcut package-repository

** Property: type (required)

- *Type:* enum[string]

- *Description:* Specifies type of package-repository.  Must be =apt=.

- *Notes:*

  - Must be =apt=.

- *Examples:*

  - =type: apt=

** Property: ppa (required)

- *Type:* string

- *Description:* PPA shortcut string.

- *Format:* =<ppa-owner>=/=<ppa-name>=

- *Examples:*

  - =ppa: snappy-devs/snapcraft-daily=

  - =ppa: mozillateam/firefox-next=

* Schema for traditional APT/deb repository sources

** Property: type (required)

- *Type:* enum[string]

- *Description:* Specifies type of package-repository.

- *Notes:*

  - Must be =apt=.

- *Examples:*

  - =type: apt=

** Property: architectures (optional)

- *Type:* list[string]

- *Description:* Architectures to enable, or restrict to, for this repository.

- *Default:* If unspecified, architectures is assumed to match the host's
  architecture.

- *Examples:*

  - =architectures: [i386]=

  - =architectures: [i386, amd64]=

** Property: formats (optional)

- *Type:* list[string]

- *Description:* List of deb types to enable.

- *Default:* If unspecified, format is assumed to be =deb=, i.e. =[deb]=.

- *Examples:*

  - =formats: [deb]=

  - =formats: [deb, deb-src]=

** Property: components (required if specifying suites)

- *Type:* list[string]

- *Description:* Apt repository components to enable: e.g. =main=, =multiverse=, =unstable=.

- *Examples:*

  - =components: [main]=

  - =components: [main, multiverse, universe, restricted]=

** Property: key-id (required if not using =ppa=)

  - *Type:* string

  - *Description:* GPG key identifier.

    - Sometimes referred to as a "thumbprint" or "fingerprint".

    - Must be 40 characters (the long-form thumbprint).

  - *Notes:*

    - If not using a key-server, Snapcraft will look for the corresponding key at:
      =<project>/snap/keys/<key-id[0:8]>.asc=.

    - To determine a key-id from a given key file using =gpg=:
      =gpg --import-options show-only --import <file>=

  - *Format:* alphanumeric, dash =-=, and underscores =_= permitted.

  - *Examples:*

    - =key-id: 590CA3D8E4826565BE3200526A634116E00F4C82=

      Snapcraft will install a corresponding key at
      =<project>/snap/keys/590CA3D8.key=.


** Property: key-server (optional)

  - *Type:* string

  - *Description:* Key server to fetch key =<key-id>= from.

  - *Default:* If unspecified, Snapcraft will attempt to fetch a specified key
    from keyserver.ubuntu.com.

  - *Format:* Key server URL supported by =gpg --keyserver=.

  - *Examples:*

    - =key-server: keyserver.ubuntu.com=

    - =key-server: hkp://keyserver.ubuntu.com:80=

** Property: path (required if not using suites & components)

  - *Type:* string

  - *Description:* Exact path to repository (relative to =url=).

    Apt sources using exact paths are incompatible with suites and components.

  - *Examples:*

    - =path: /=

    - =path: my-repo=

    - =path: my-repo/=

** Property: suites (required if not using path)

  - *Type:* string

  - *Description:* Repository suites to enable.

  - *Notes:*

    - If your deb URL does not look like it has a suite defined, it is likely
      that the repository uses an exact path. Consider using =path=.

  - *Examples:*

    - =suites: [xenial]=

    - =suites: [xenial, xenial-updates]=

** Property: url (required)

  - *Type:* string

  - *Description:* Repository URL, e.g. ==.

  - *Examples:*

    - =url: http://archive.canonical.com/ubuntu=

    - =url: https://apt-repo.com/stuff=

* Example configurations

#+BEGIN_SRC yaml
package-repositories:
  # PPA repository.
  - type: apt
    ppa: snappy-dev/snapcraft-daily

  # Apt repository with components and suites.
  - type: apt
    components: [main]
    suites: [xenial]
    key-id: 78E1918602959B9C59103100F1831DDAFC42E99D
    url: http://ppa.launchpad.net/snappy-dev/snapcraft-daily/ubuntu

  # Apt repository enabling deb sources.
  - type: apt
    formats: [deb, deb-src]
    components: [main]
    suites: [xenial]
    key-id: 78E1918602959B9C59103100F1831DDAFC42E99D
    url: http://ppa.launchpad.net/snappy-dev/snapcraft-daily/ubuntu

  # Absolute path repository with implied "/".
  - type: apt
    key-id: AE09FE4BBD223A84B2CCFCE3F60F4B3D7FA2AF80
    url: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64`

  # Absolute path repository with explicit path and formats.
  - type: apt
    formats: [deb]
    path: /
    key-id: AE09FE4BBD223A84B2CCFCE3F60F4B3D7FA2AF80
    url: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64`
#+END_SRC

* Key search methodology

1. =<key-id>= will be checked at =<project>/snap/keys/<key-id[0:8]>.asc=.

   - If =<key-id[0:8]>.asc= file exists and =key-id= matches, the key file will
     be imported.

   - If =<key-id[0:8]>.asc= file exists and =key-id= does not match, Snapcraft
     must error.

   - If =<key-id[0:8]>.asc= file does not exist, continue to step 2.

2. =<key-id>= will be queried from the =<key-server>=, defaulting to =keyserver.ubuntu.com=.

   - If key is found, the key will be imported.

   - If key not found, an error will be presented to the user:

#+BEGIN_SRC python
Failed to install GPG key: GPG key {key_id} not found on key server {key_server!r}.

Recommended resolution:
Verify GPG key ID and key server are correct, or install key to
<project>/snap/keys/{key_id[0:8]}.asc.

Detailed information:
GPG key ID: <key-id>
GPG key server: <key-server>
#+END_SRC

If there are any unused keys present in =<project>/snap/keys=, Snapcraft must error.

* GPG Keyring handling

All GPG keys will be imported into a new keyring:
=/etc/apt/trusted.gpg.d/snapcraft.gpg=
