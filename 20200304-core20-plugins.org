#+TITLE: Plugins for core20
#+AUTHOR: Sergio Schvezov <sergio.schvezov@canonical.com>
#+DATE: [2020-03-04]

* Scope
Starting with =base: core20=, plugins shall be explicitly versioned.
This shall ensure that plugins can evolve independently and that no
breakages occur when other bases are used.

The reach of this document by base. is to define plugin layout and the base plugin.
Each plugin specification shall have its own specification drafted.

* Plugin Layout
Existing plugins using =core= or =core18= as a =base= shall continue using their
original logic for loading, that is
When the =base= in snapcraft is set different one than the previously mentioned
bases, then snapcraft will use the following path to search for plugins:
=snapcraft.plugins.<base>= and search for =<plugin-name>.py=.

Plugin class names must be named =Plugin=. The plugin help shall be implemented
as the *doctring* for the plugin module.

** Custom Plugins
Custom plugins shall be declared on =snapcraft.yaml= with a prefix of =x-= and
the plugin name. On the file system they shall be found on
=snap/plugins/x_<plugin.name.py>=.
* CLI Help
The Snapcraft =help= command shall default to the =base= declared in
=snapcraft.yaml= or if not in a *Snapcraft Project*, to the latest supported
base.

In all cases, Snapcraft shall inform the base the help applies to.

A mechanism must exist to be able to invoke the help for a plugin that would
apply to different base than the one from the current project or default.

The =--base= option can be used with =snapcraft help=:
#+BEGIN_SRC
$ snapcraft help --base=core python
Displaying help for the 'python' plugin for 'core20'
<plugin-help>
#+END_SRC
* Core20 Base Plugin
The base plugin for =core20=, an Abstract Base Class (inherits from =abc.ABC=)
is required to create a plugin to be used with =core20=.

The plugin name is =BaseCore20Plugin= with an import path of =snapcraft.BaseCore20Plugin=
defines the following:

#+BEGIN_SRC  python
class BaseCore20Plugin(abc.ABC):
    @classmethod
    @abstactmethod
    def get_environment(cls) -> Dict[str, str]:
        """Return a dictionary with the static environment that is relevant to the plugin."""

    def __init__(self, project: build_environment: Dict[str, str]) -> None:
        """
        :param build_environment: user added build environment for the plugin to consume.
        :raises PluginBadBuildEnvironmentError: when invalid build_environment was passed to the plugin.
        """

    @abstractmethod
    def get_build_commands(self) -> List[List[str]]:
        """Return a list of commands to run during the pull step."
#+END_SRC

A common difference from previous implementations is that only build needs to be
implemented. This leaves source handling through the pull step a pure snapcraft
core concern.

As an example, this would be a simplified implementation of the make plugin:
#+BEGIN_SRC python
"""
Plugin help
"""

from typing import Dict, List

import snapcraft

class Plugin(snapcraft.BaseCore20Plugin):
    @classmethod
    def get_environment(cls) -> Dict[str, str]:
        environment = super().get_environment()
        environment.update(
            {
                "CPPFLAGS": "-I$SNAPCRAFT_STAGE/include",
            }
        )
        return environment

    def get_build_commands(self) -> List[List[str]]:
        commands = super().get_build_commands()
        commands.extend(
            ["make", "-j", "$SNAPCRAFT_PARALLEL_BUILD_COUNT"],
            ["make", "install", "DESTDIR=$SNAPCRAFT_PART_INSTALL"]
        )

        return commands
#+END_SRC
