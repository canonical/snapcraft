#+TITLE: Plugins for core20
#+AUTHOR: Sergio Schvezov <sergio.schvezov@canonical.com>
#+DATE: [2020-03-04]

* Scope
Starting with =base: core20=, plugins shall be explicitly versioned.
This shall ensure that plugins can evolve independently and that no
breakages occur when other bases are used.

The reach of this document by base. is to define plugin layout and the base plugin.
Each plugin specification shall have its own specification drafted.

* Plugin Layout
Existing plugins using =core= or =core18= as a =base= shall continue using their
original logic for loading, that is
When the =base= in snapcraft is set different one than the previously mentioned
bases, then snapcraft will use the following path to search for plugins:
=snapcraft.plugins.<base>= and search for =<plugin-name>.py=.

Plugin class names must be named =Plugin=. The plugin help shall be implemented
as the *doctring* for the plugin module.

** Custom Plugins
Custom plugins shall be declared on =snapcraft.yaml= with a prefix of =x-= and
the plugin name. On the file system they shall be found on
=snap/plugins/x_<plugin.name.py>=.
* Core20 Base Plugin
The base plugin for =core20=, an Abstract Base Class (inherits from =abc.ABC=)
is required to create a plugin to be used with =core20=.

The plugin name is =Plugin= with an import path of =snapcraft.plugins.core20.plugin=
defines the following:

#+BEGIN_SRC  python
class Plugin(abc.ABC):
    @classmethod
    @abstactmethod
    def get_environment(cls) -> Dict[str, str]:
        """Return a dictionary with the static environment that is relevant to the plugin."""

    def __init__(self, project: build_environment: Dict[str, str]) -> None:
        """
        :param build_environment: user added build environment for the plugin to consume.
        :raises PluginBadBuildEnvironmentError: when invalid build_environment was passed to the plugin.
        """

    @abstractmethod
    def get_build_commands(self) -> List[str]:
        """
        Return a list of commands to run during the build step.

        These commands are run in a single shell instance. This means
        that commands run before do affect the commands that follow.

        snapcraftctl can be used in the script to call out to snapcraft
        specific functionality.
        """
#+END_SRC

A common difference from previous implementations is that only build needs to be
implemented. This leaves source handling through the pull step a pure snapcraft
core concern.
** Example
As an example, this would be a simplified implementation of the samurai plugin
(a fake ninja based build tool that uses make syntax):
#+BEGIN_SRC python
"""
Plugin help
"""

from typing import Dict, List

import snapcraft

class PluginImpl(snapcraft.plugins.core20.Plugin):
    @classmethod
    def get_environment(cls) -> Dict[str, str]:
        environment = super().get_environment()
        environment.update(
            {
                "CPPFLAGS": "-I$SNAPCRAFT_STAGE/include -I foo",
            }
        )
        return environment

    def get_build_commands(self) -> List[str]:
        commands = super().get_build_commands()
        commands.extend(
            [
                "samurai -j $SNAPCRAFT_PARALELL_BUILD_COUNT",
                "samurai install DESTDIR=$SNAPCRAFT_PART_INSTALL",
            ]
        )

        return commands
#+END_SRC
* CLI
Wherever relevant, the Snapcraft commands shall default to the =base= declared
in =snapcraft.yaml= or if not in a *Snapcraft Project*, to the latest supported
base.

In all cases, Snapcraft shall inform the base that is being used to present
information.

A mechanism must exist to be able to invoke Snapcraft commands for a plugin that
would apply to different base than the one from the current project or default.

The =--base= option is the preferred way to specify output targeting a specific
base.
** Help
#+BEGIN_SRC
$ snapcraft help --base=core python
Displaying help for the 'python' plugin for 'core20'
<plugin-help>
#+END_SRC
** Listing plugins
#+BEGIN_SRC
$ snapcraft list-plugins --base=core
Displaying plugins available for core
<plugin-list>
#+END_SRC
** Expanding snapcraft.yaml
This is a new command, meant to expose the plugins behavior in an easy way to
the =snapcraft.yaml= author. Given the plugin described in [[*Example][Example]], with the
following =snapcraft.yaml=
#+BEGIN_SRC yaml
name: project
base: core20
summary: use of the samurai plugin
description: an example meant to expand the samurai plugin

parts:
  samurai-part:
    source: .
    plugin: samurai
#+END_SRC

It can be *expanded* (or *explained*), by running:
#+BEGIN_SRC
$ snapcraft expand
name: project
base: core20
summary: use of the samurai plugin
description: an example meant to expand the samurai plugin

parts:
  samurai-part:
    source: .
    plugin: samurai
    build-environment:
      CPPFLAGS: "-I$SNAPCRAFT_STAGE/include -I foo",
    override-build: |
     samurai -j $SNAPCRAFT_PARALELL_BUILD_COUNT
     samurai $SNAPCRAFT_SAMURAI_INSTALL_TARGET DESTDIR=$SNAPCRAFT_PART_INSTALL
#+END_SRC
