[codespell]
ignore-words-list = buildd,crate,keyserver,comandos,ro
skip = waf,*.tar,*.xz,*.zip,*.bz2,*.7z,*.gz,*.deb,*.rpm,*.snap,*.gpg,*.pyc,*.png,*.ico,*.jar,*.so,changelog,.git,.hg,.mypy_cache,.tox,.venv,venv,_build,buck-out,__pycache__,build,dist,.vscode,parts,stage,prime,test_appstream.py,./snapcraft.spec,./.direnv,./.pytest_cache,.ruff_cache
quiet-level = 4

[flake8]
# E501 line too long
# E203 whitespace before ':'
extend-ignore = E203, E501
max-complexity = 10
max-line-length = 88
exclude =
    # No need to traverse our git directory
    .direnv,
    .git,
    .hg,
    .mypy_cache,
    .tox,
    .venv,
    .vscode,
    _build,
    buck-out,
    # There's no value in checking cache directories
    __pycache__,
    # This contains builds of flake8 that we don't want to check
    build,
    dist,
    # snapcraft generated
    parts,
    stage,
    prime

[pycodestyle]
max-line-length = 88
ignore = E203,E501

[pydocstyle]
# D107 Missing docstring in __init__ (reason: documented in class docstring)
# D203 1 blank line required before class docstring (reason: pep257 default)
# D213 Multi-line docstring summary should start at the second line (reason: pep257 default)
ignore = D107, D203, D213
ignore_decorators = overrides

[tox:tox]
min_version = 4.0
env_list =
    # Parametrized environments.
    # First parameter allows us to choose Python 3.8 or 3.10.
    # Second parameter chooses how to define the environment:
    #  withreq: using requirements-devel.txt
    #  noreq: Without either requirements file (but including dev requirements)
    # Third parameter selects the current unit tests (unit) or the legacy unit tests (legacy)
    py{38,310}-{withreq,noreq}-{unit,legacy}
skip_missing_interpreters = true
labels =
    # Minimal testing environments. run with `tox run-parallel -m test`
    test = py38-withreq-{unit,legacy}
    # Test in Python 3.10 from an empty environment.
    future-test = py310-noreq-{unit,legacy}
    # Environments to run in CI
    ci = py{38,310}-withreq-{unit,legacy},py{38,310}-noreq-unit
    # Just run the regular unit tests, not the legacy ones
    unit = py{38,310}-{withreq,noreq}-unit
    # Legacy unit tests only
    legacy = py{38,310}-{withreq,noreq}-legacy
set_env =
    SNAPCRAFT_IGNORE_YAML_BINDINGS: "1"

[testenv]
deps =
    withreq,pylint,mypy,pyright: -r{tox_root}/requirements-devel.txt
    noreq: PyNaCl>=1.5.0
    noreq,codespell: python-apt@git+https://salsa.debian.org/apt-team/python-apt.git@2.0.0
extras =
    noreq: dev
package = wheel

[testenv:py{38,310}-{withreq,noreq}-unit]
description = Run the unit tests
commands =
    pytest {tty:--color=yes} --cov-report=xml:results/coverage-{env_name}.xml --junit-xml=results/test-results-{env_name}.xml tests/unit {posargs}

[testenv:py{38,310}-{withreq,noreq}-legacy]
description = Run the legacy unit tests
commands =
    pytest {tty:--color=yes} --cov-report=xml:results/coverage-{env_name}.xml --junit-xml=results/test-results-{env_name}.xml tests/legacy/unit/ {posargs}

[testenv:format-black]
description = Autoformat with black
labels = fix
deps = black
skip_install = true
# Note: this does not include `snapcraft_legacy` as it contains several files that need reformatting.
commands = black setup.py snapcraft tests

[testenv:format-ruff]
base = ruff
description = Autoformat with ruff
labels = fix
commands =
    ruff --fix setup.py snapcraft tests tools
    ruff --fix --config snapcraft_legacy/ruff.toml snapcraft_legacy tests/legacy

[testenv:pylint]
description = Lint with pylint
labels = lint
# This runs all commands even if the first fails.
# Not to be confused with ignore_outcome, which turns errors into warnings.
ignore_errors = true
commands =
    pylint -j 0 snapcraft
    pylint -j 0 tests --disable=invalid-name,missing-module-docstring,missing-function-docstring,duplicate-code,protected-access,unspecified-encoding,too-many-public-methods,too-many-arguments,too-many-lines,redefined-outer-name

[testenv:shellcheck]
description = Check spelling with shellcheck
labels = lint
skip_install = true
allowlist_externals = bash
commands =
    bash -c "find . \( -name .git -o -name gradlew -o -name .tox -o -name .ruff_cache -o \
    -path ./tests/spread/tools/snapd-testing-tools \) -prune -o -print0 | xargs -0 file -N \
    | grep shell.script | cut -f1 -d: | xargs shellcheck"

[testenv:spread-shellcheck]
description = Run shellcheck on spread's test.yaml files using spread-shellcheck.py
labels = lint
deps = pyyaml
skip_install = true
commands = python3 tools/spread-shellcheck.py spread.yaml tests/spread/

[testenv:mypy]
description = Run mypy
labels = type, lint
skip_install = true
commands = mypy --install-types --non-interactive .

[testenv:pyright]
description = run PyRight
labels = type, lint
allowlist_externals = pyright
commands = pyright snapcraft tests

[testenv:black]
description = run black in checking mode
skip_install = true
labels = lint
deps = black
commands = black --check --diff setup.py snapcraft tests

[testenv:codespell]
description = Check spelling with codespell
skip_install = true
labels = lint
deps = codespell
commands = codespell

[testenv:ruff]
description = Lint with ruff
skip_install = true
labels = lint
deps = ruff==0.0.220
# This runs all commands even if the first fails.
# Not to be confused with ignore_outcome, which turns errors into warnings.
ignore_errors = true
commands =
    ruff --config snapcraft_legacy/ruff.toml snapcraft_legacy tests/legacy
    ruff setup.py snapcraft tests tools

[testenv:isort]
description = Check import order with isort
skip_install = true
labels = lint
deps = isort
commands = isort --check .

[testenv:docstyle]
description = Check documentation style with pydocstyle
skip_install = true
labels = lint
deps = pydocstyle
commands = pydocstyle snapcraft
