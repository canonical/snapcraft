# -*- Mode:Python; indent-tabs-mode:nil; tab-width:4 -*-
#
# Copyright 2022 Canonical Ltd.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""Unit tests for SnapConfig class."""
from pathlib import Path
from textwrap import dedent

import pytest

from snapcraft.snap_config import SnapConfig


@pytest.fixture(autouse=True)
def mock_snap_data_env_var(monkeypatch, tmp_path):
    monkeypatch.setenv("SNAP_DATA", str(tmp_path))


@pytest.fixture
def create_snap_config(tmp_path):
    """Creates a snap config file."""

    def _snap_config(*, provider: str) -> Path:
        filepath = tmp_path / "snap-config.yaml"
        filepath.write_text(
            dedent(
                f"""
            # This file is generated automatically generated by snapcraft's configure hook.
            # Do not write directly to this file. Instead, call 'snap set snapcraft <key>=<value>'.

            "provider": "{provider}"
            """
            )
        )
        return filepath

    yield _snap_config


def test_unmarshal():
    """Verify unmarshalling works as expected."""
    config = SnapConfig.unmarshal({"provider": "lxd"})

    assert config.provider == "lxd"


def test_unmarshal_invalid_provider_error():
    """Verify unmarshalling with an invalid provider raises an error."""
    with pytest.raises(ValueError) as raised:
        SnapConfig.unmarshal({"provider": "invalid-value"})

    assert str(raised.value) == "error loading snap-config.yaml"


def test_unmarshal_not_a_dictionary():
    """Verify unmarshalling with data that is not a dictionary raises an error."""
    with pytest.raises(TypeError) as raised:
        SnapConfig.unmarshal("provider=lxd")  # type: ignore

    assert str(raised.value) == "snap config data is not a dictionary"


def test_unmarshal_extra_data_error():
    """Verify unmarshalling with extra data raises an error."""
    with pytest.raises(ValueError) as raised:
        SnapConfig.unmarshal({"provider": "lxd", "test": "test"})

    assert str(raised.value) == "error loading snap-config.yaml"


def test_load(tmp_path, create_snap_config):
    """Verify loading a valid snap config file."""
    create_snap_config(provider="lxd")
    config = SnapConfig.load()

    assert config == SnapConfig(provider="lxd")


def test_load_no_env_var(monkeypatch):
    """Verify no data is returned when $SNAP_DATA does not exist."""
    monkeypatch.delenv("SNAP_DATA", raising=False)

    assert SnapConfig.load() is None


def test_load_no_config_file(tmp_path):
    """Verify no data is returned when config file does not exist."""
    assert not (tmp_path / "snap-config.yaml").exists()
    assert SnapConfig.load() is None
