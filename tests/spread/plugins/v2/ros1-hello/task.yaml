summary: >-
  Build, clean, build, modify and rebuild, and run hello
  for ROS 1 (catkin and catkin-tools).

kill-timeout: 180m

environment:
  SNAP/catkin_noetic_hello: catkin-noetic-hello
  SNAP/catkin_tools_noetic_hello: catkin-tools-noetic-hello
  SNAPCRAFT_ENABLE_EXPERIMENTAL_EXTENSIONS: "1"

systems:
  - ubuntu-20.04
  - ubuntu-20.04-64
  - ubuntu-20.04-amd64
  - ubuntu-20.04-arm64

prepare: |
  #shellcheck source=tests/spread/tools/snapcraft-yaml.sh
  . "$TOOLS_DIR/snapcraft-yaml.sh"
  set_base "../snaps/$SNAP/snap/snapcraft.yaml"

restore: |
  cd "../snaps/$SNAP"
  snapcraft clean
  rm -f ./*.snap

  git checkout src/snapcraft_hello/src/hello.cpp

  #shellcheck source=tests/spread/tools/snapcraft-yaml.sh
  . "$TOOLS_DIR/snapcraft-yaml.sh"
  restore_yaml "snap/snapcraft.yaml"

execute: |
  cd "../snaps/$SNAP"

  # Build what we have and verify the snap runs as expected.
  snapcraft
  snap install "${SNAP}"_1.0_*.snap --dangerous
  [ "$($SNAP)" = "hello world" ]

  # Clean the hello part, then build and run again.
  snapcraft clean hello
  snapcraft
  snap install "${SNAP}"_1.0_*.snap --dangerous
  [ "$($SNAP)" = "hello world" ]

  # Make sure that what we built runs with the changes applied.
  modified_file=src/snapcraft_hello/src/hello.cpp
  sed -i "${modified_file}" -e 's/hello world/hello rebuilt world/'

  snapcraft
  snap install "${SNAP}"_1.0_*.snap --dangerous
  [ "$($SNAP)" = "hello rebuilt world" ]
