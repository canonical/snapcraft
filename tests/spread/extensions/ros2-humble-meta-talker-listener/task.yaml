summary: Build and run a basic ROS 2 snap using meta-ros extension

kill-timeout: 180m

environment:
  SNAPCRAFT_ENABLE_EXPERIMENTAL_EXTENSIONS: "1"

  SNAP: colcon-talker-listener
  SNAP_DIR: "../../plugins/craft-parts/$SNAP/$SNAP"

  META_SNAP/colcon_humble_ros_core: ros-humble-ros-core
  EXTENSION/colcon_humble_ros_core: ros2-humble-ros-core
  INTERFACE/colcon_humble_ros_core: ros-humble-ros-core

  META_SNAP/colcon_humble_ros_base: ros-humble-ros-base
  EXTENSION/colcon_humble_ros_base: ros2-humble-ros-base
  INTERFACE/colcon_humble_ros_base: ros-humble-ros-base

  META_SNAP/colcon_humble_desktop: ros-humble-desktop
  EXTENSION/colcon_humble_desktop: ros2-humble-desktop
  INTERFACE/colcon_humble_desktop: ros-humble-desktop

# The content snap required for the test to succeed is only
# available on a subset of all the architectures this testbed
# can run on.
systems:
  - ubuntu-22.04
  - ubuntu-22.04-64
  - ubuntu-22.04-amd64
  - ubuntu-22.04-arm64

prepare: |
  #shellcheck source=tests/spread/tools/snapcraft-yaml.sh
  . "$TOOLS_DIR/snapcraft-yaml.sh"
  set_base "$SNAP_DIR/snap/snapcraft.yaml"

  # Overwrite the extension to test them all out of a single snap
  sed -i "s|ros2-humble|${EXTENSION}|" "$SNAP_DIR/snap/snapcraft.yaml"

  #shellcheck source=tests/spread/tools/package-utils.sh
  . "$TOOLS_DIR/package-utils.sh"
  create_dpkg_restore_point

restore: |
  cd "$SNAP_DIR"
  snapcraft clean
  rm -f ./*.snap

  #shellcheck source=tests/spread/tools/snapcraft-yaml.sh
  . "$TOOLS_DIR/snapcraft-yaml.sh"
  restore_yaml "snap/snapcraft.yaml"

  #shellcheck source=tests/spread/tools/package-utils.sh
  . "$TOOLS_DIR/package-utils.sh"
  dpkg_restore_point

  snap remove --purge "${META_SNAP}"

execute: |
  cd "$SNAP_DIR"

  # Build what we have and verify the snap runs as expected.
  snapcraft
  snap install "${SNAP}"_1.0_*.snap --dangerous

  # Check that the snap size is fairly small
  # The non-content sharing snap is ~90M
  SNAP_SIZE=$(find . -maxdepth 1 -mindepth 1 -name '*_1.0_*.snap' -exec ls -s {} + | cut -d " " -f1)
  [ "800" -gt "$SNAP_SIZE" ]

  # The default providing snap is installed automatically
  # snap install "${META_SNAP}"

  snap connect "${SNAP}:${INTERFACE}" "${META_SNAP}:${INTERFACE}"

  # Run the ROS system. By default this will never exit, but the snap supports
  # an `exit_after_receive` parameter that, if true, will cause the system to
  # shutdown after the listener has successfully received a message.
  "$SNAP" exit_after_receive:=true | MATCH "I heard: 'Hello, world! 0'"
