summary: Build and run a basic ROS 2 snap using meta-ros extension

kill-timeout: 180m

environment:
  META_SNAP/colcon_foxy_ros_core: ros-foxy-ros-core
  EXTENSION/colcon_foxy_ros_core: ros2-foxy-ros-core

  META_SNAP/colcon_foxy_ros_base: ros-foxy-ros-base
  EXTENSION/colcon_foxy_ros_base: ros2-foxy-ros-base

  META_SNAP/colcon_foxy_desktop: ros-foxy-desktop
  EXTENSION/colcon_foxy_desktop: ros2-foxy-desktop

  SNAP: colcon-foxy-ros-core
  SNAP_DIR: "../snaps/$SNAP"

  INTERFACE: ros-foxy

# The content snap required for the test to succeed is only
# available on a subset of all the architectures this testbed
# can run on.
systems:
  - ubuntu-20.04
  - ubuntu-20.04-64
  - ubuntu-20.04-amd64
  - ubuntu-20.04-arm64

prepare: |
  #shellcheck source=tests/spread/tools/snapcraft-yaml.sh
  . "$TOOLS_DIR/snapcraft-yaml.sh"
  set_base "$SNAP_DIR/snap/snapcraft.yaml"

  # Overwrite the extension to test them all out of a single snap
  sed -i "s|ros2-.*-ros-core|${EXTENSION}|" "$SNAP_DIR/snap/snapcraft.yaml"

restore: |
  cd "$SNAP_DIR"
  snapcraft clean
  rm -f ./*.snap

  [ -f src/colcon-*-ros-core/src/hello.cpp ] && git checkout src/colcon-*-ros-core/src/hello.cpp

  #shellcheck source=tests/spread/tools/snapcraft-yaml.sh
  . "$TOOLS_DIR/snapcraft-yaml.sh"
  restore_yaml "snap/snapcraft.yaml"

execute: |
  cd "$SNAP_DIR"

  # Build what we have and verify the snap runs as expected.
  snapcraft
  snap install "${SNAP}"_1.0_*.snap --dangerous

  # Check that the snap size is fairly small
  # The non-content sharing snap is ~90M
  SNAP_SIZE=$(ls -s "${SNAP}"_1.0_*.snap | cut -d " " -f1)
  [ "200" -gt "$SNAP_SIZE" ]

  # Install the providing snap
  # snap install "${META_SNAP}"

  snap connect "${SNAP}":"${INTERFACE}" "${META_SNAP}":"${INTERFACE}"
  [ "$($SNAP)" = "hello world" ]
