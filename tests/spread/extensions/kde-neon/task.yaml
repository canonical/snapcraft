summary: Build and run a basic kde snap using extensions

# The content snap required for the test to succeed is only
# available on a subset of all the architectures this testbed
# can run on.
systems:
  - ubuntu-18.04
  - ubuntu-18.04-64
  - ubuntu-18.04-amd64
  - ubuntu-20.04
  - ubuntu-20.04-64
  - ubuntu-20.04-amd64

environment:
  SNAP_DIR: ../snaps/neon-hello

prepare: |
  #shellcheck source=tests/spread/tools/snapcraft-yaml.sh
  . "$TOOLS_DIR/snapcraft-yaml.sh"
  set_base "$SNAP_DIR/snap/snapcraft.yaml"

  if [[ "$SPREAD_SYSTEM" =~ ubuntu-20.04 ]]; then
    sed -i 's|command: bin/hello|command: usr/local/bin/hello|' "${SNAP_DIR}/snap/snapcraft.yaml"
    sed '/build-snaps: .*/d' "${SNAP_DIR}/snap/snapcraft.yaml"
  fi

restore: |
  cd "$SNAP_DIR"
  snapcraft clean
  rm -f ./*.snap

  #shellcheck source=tests/spread/tools/snapcraft-yaml.sh
  . "$TOOLS_DIR/snapcraft-yaml.sh"
  restore_yaml "snap/snapcraft.yaml"

execute: |
  cd "$SNAP_DIR"

  if [[ "$SPREAD_SYSTEM" =~ ubuntu-20.04 ]]; then
    output="$(snapcraft --enable-experimental-extensions)"
    snap install neon-hello_*.snap --dangerous
    # This snap requires manual connection
    snap connect neon-hello:kde-frameworks-5-plug kde-frameworks-5-qt-5-15-core20:kde-frameworks-5-qt-5-15-core20-slot
  else
    output="$(snapcraft)"
    snap install neon-hello_*.snap --dangerous
  fi

  [ "$(neon-hello)" = "hello world" ]

  # Verify that the extension command chain went through the proper setup procedure
  snap_user_data="$HOME/snap/neon-hello/current"
  [ -d "$snap_user_data/.config" ]
  [ -d "$snap_user_data/.local" ]
  [ -f "$snap_user_data/.last_revision" ]
  [ "$(cat "$snap_user_data/.last_revision")" = "SNAP_DESKTOP_LAST_REVISION=x1" ]

  # Verify all dependencies were found.
  if echo "$output" | grep -q "part is missing libraries"; then
    echo "failed to find content snaps' libraries"
    exit 1
  fi
