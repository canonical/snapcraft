summary: Test the store workflow to register, upload, and release a snap

environment:
  # use a core22 snap with components but no component hooks
  # this can be changed after the snap store and review-tools have more support for components
  SNAP: "/snapcraft/tests/spread/core22/components-environment/"
  SNAPCRAFT_STORE_CREDENTIALS/ubuntu_one: "$(HOST: echo ${SNAPCRAFT_STORE_CREDENTIALS_STAGING})"
  SNAPCRAFT_STORE_CREDENTIALS/legacy: "$(HOST: echo ${SNAPCRAFT_STORE_CREDENTIALS_STAGING_LEGACY})"
  SNAPCRAFT_STORE_CREDENTIALS/candid: "$(HOST: echo ${SNAPCRAFT_STORE_CREDENTIALS_STAGING_CANDID})"

prepare: |
  if [[ -z "$SNAPCRAFT_STORE_CREDENTIALS" ]]; then
    echo "No credentials set in env SNAPCRAFT_STORE_CREDENTIALS"
    exit 1
  fi

  # Install the review tools to make sure we do not break anything
  # assumed in there.
  # TODO: requires running inside $HOME.
  # snap install review-tools

  #shellcheck source=tests/spread/tools/snapcraft-yaml.sh
  . "$TOOLS_DIR/snapcraft-yaml.sh"

  # Do not change the test-snapcraft- prefix. Ensure that you
  # notify the store team if you need to use a different value when
  # working with the production store.     
  name="test-snapcraft-$(shuf -i 1-1000000000 -n 1)"
  set_name "$SNAP/snapcraft.yaml" "${name}"
  set_grade "$SNAP/snapcraft.yaml" stable

  # Build what we have and verify the snap runs as expected.
  cd "$SNAP"
  snapcraft

restore: |
  cd "$SNAP"
  snapcraft clean
  rm -f ./*.snap ./*.comp

  snap refresh snapd --stable

  #shellcheck source=tests/spread/tools/snapcraft-yaml.sh
  . "$TOOLS_DIR/snapcraft-yaml.sh"
  restore_yaml "snapcraft.yaml"

execute: |
  # Get information about our snap.
  cd "$SNAP"
  snap_file=$(ls ./*.snap)
  foo_component_file=$(ls ./test-snapcraft*+foo_1.0.comp)
  bar_baz_component_file=$(ls ./test-snapcraft*+bar-baz_1.0.comp)
  snap_name=$(grep "name: " snapcraft.yaml | sed -e "s/name: \(.*$\)/\1/")

  # Login mechanism
  export SNAPCRAFT_STORE_AUTH="${SPREAD_VARIANT}"

  # Who Am I?
  snapcraft whoami

  # Register
  snapcraft register --yes "${snap_name}"

  # Take a look at registered snaps.
  snapcraft list

  # Push and Release
  snapcraft upload "${snap_file}" --release edge --component "foo=${foo_component_file}" --component "bar-baz=${bar_baz_component_file}"

  # Show revisions
  snapcraft list-revisions "${snap_name}"

  # Release
  snapcraft release "${snap_name}" 1 edge

  # Status
  snapcraft status "${snap_name}"
  snapcraft status "${snap_name}" --track latest --arch amd64
  
  # Progressive Release
  snapcraft release --progressive 50 "${snap_name}" 1 candidate

  # Close channel
  snapcraft close "${snap_name}" candidate

  # List tracks
  snapcraft list-tracks "${snap_name}"

  # Show metrics for a snap that we have registered in the past (empty metrics as no users!).
  snapcraft metrics fun --format json --name installed_base_by_operating_system
  snapcraft metrics fun --format table --name installed_base_by_operating_system
