summary: Verify --ua-token functionality

environment:
  SNAP_DIR: snaps/ua-token-test
  SNAPCRAFT_UA_TOKEN: "$(HOST: echo ${UA_TOKEN})"
  SNAPCRAFT_BUILD_ENVIRONMENT: ""
  GITHUB_REPOSITORY_OWNER: "$(HOST: echo ${GITHUB_REPOSITORY_OWNER})"

prepare: |
  #shellcheck source=tests/spread/tools/snapcraft-yaml.sh
  . "$TOOLS_DIR/snapcraft-yaml.sh"

  cd "$SNAP_DIR"
  set_base "snap/snapcraft.yaml"

restore: |
  # core20 will use multipass if this isn't set
  if [ "$SPREAD_SYSTEM" = "ubuntu-20.04-64" ]; then
    export SNAPCRAFT_BUILD_ENVIRONMENT=lxd
  fi

  cd "$SNAP_DIR"
  snapcraft clean
  rm -f ./*.snap

  #shellcheck source=tests/spread/tools/snapcraft-yaml.sh
  . "$TOOLS_DIR/snapcraft-yaml.sh"
  restore_yaml "snap/snapcraft.yaml"

execute: |
  if [ -z "$SNAPCRAFT_UA_TOKEN" ]; then
    # This test has to run in the main repo's workflow and can be skipped in other environments.
    if [ "$GITHUB_REPOSITORY_OWNER" == "canonical" ]; then
      echo "No UA token found in env UA_TOKEN"
      exit 1
    else
      echo "Skipping test because UA_TOKEN isn't set and the test is outside of canonical repo"
      exit 0
    fi
  fi

  # core20 will use multipass if this isn't set
  if [ "$SPREAD_SYSTEM" = "ubuntu-20.04-64" ]; then
    export SNAPCRAFT_BUILD_ENVIRONMENT=lxd
  fi

  cd "$SNAP_DIR"

  output="$(snapcraft 2>&1)"
  echo "$output" | MATCH "Attaching specified UA token..."
  echo "$output" | MATCH "Detaching specified UA token..."

  # Break the build and ensure token gets detached.
  sed -i 's|sleep 0|exit 1|g' snap/snapcraft.yaml

  output="$(snapcraft 2>&1 || true)"
  echo "$output" | MATCH "Attaching specified UA token..."
  echo "$output" | MATCH "Detaching specified UA token..."
