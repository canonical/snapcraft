summary: Build snaps that test the grammar keywords.

systems:
  - ubuntu-20.04
  - ubuntu-20.04-64
  - ubuntu-20.04-amd64
  - ubuntu-22.04
  - ubuntu-22.04-64
  - ubuntu-22.04-amd64

prepare: |
  #shellcheck source=tests/spread/tools/snapcraft-yaml.sh
  . "$TOOLS_DIR/snapcraft-yaml.sh"
  set_base "./snap/snapcraft.yaml"

restore: |
  snapcraft clean
  rm -f ./*.snap

  #shellcheck source=tests/spread/tools/snapcraft-yaml.sh
  . "$TOOLS_DIR/snapcraft-yaml.sh"
  restore_yaml "snap/snapcraft.yaml"

execute: |
  # first, run `snapcraft prime` for amd64
  if [[ "$SPREAD_SYSTEM" =~ ubuntu-18.04 ]] || [[ "$SPREAD_SYSTEM" =~ ubuntu-20.04 ]]; then
      # for core18 and core20, replace architectures block with
      # - build-on: amd64
      #   run-on: [amd64, arm64]
      sed -i '/build-on:/,+3 d;  /architectures:/ a\  - build-on: amd64\n    run-on: [amd64, arm64]' snap/snapcraft.yaml
      snapcraft prime --destructive-mode --target-arch amd64 --enable-experimental-target-arch
  else
      # no changes needed for core22
      SNAPCRAFT_BUILD_FOR=amd64 snapcraft prime --destructive-mode
  fi


  # verify `on amd64 to amd64` grammar was processed
  if ! grep "I was built on amd64 and built for amd64." prime/hello-world.sh; then
    echo "Grammar was not processed as expected!"
    exit 1
  fi

  # next, run `snapcraft prime` for arm64
  if [[ "$SPREAD_SYSTEM" =~ ubuntu-18.04 ]] || [[ "$SPREAD_SYSTEM" =~ ubuntu-20.04 ]]; then
      snapcraft prime --destructive-mode --target-arch arm64 --enable-experimental-target-arch
  else
      SNAPCRAFT_BUILD_FOR=arm64 snapcraft prime --destructive-mode
  fi

  # verify `on amd64 to arm64` grammar was processed
  if ! grep "I was built on amd64 and built for arm64." prime/hello-world.sh; then
    echo "Grammar was not processed as expected!"
    exit 1
  fi
